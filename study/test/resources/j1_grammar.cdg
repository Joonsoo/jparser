CompilationUnit = OrdinaryCompilationUnit WS $0
OrdinaryCompilationUnit =
  (WS PackageDeclaration)? (WS ImportDeclaration)* (WS TopLevelClassOrInterfaceDeclaration)*
  {OrdinaryCompilationUnit(pkgDecl=$0, imports=$1, decls=$2)}

PackageDeclaration = "package"&Tk WS Identifier (WS '.' WS Identifier)* WS ';' {PackageDeclaration(pkg=[$2] + $3)}


ImportDeclaration: ImportDeclaration = SingleTypeImportDeclaration

SingleTypeImportDeclaration = "import"&Tk WS TypeName WS ';' {SingleTypeImportDeclaration(name=$2)}

TopLevelClassOrInterfaceDeclaration: TopLevelClassOrInterfaceDeclaration = ClassDeclaration | InterfaceDeclaration


ClassDeclaration: ClassDeclaration = NormalClassDeclaration | EnumDeclaration

NormalClassDeclaration =
  (ClassModifier WS)* "class"&Tk WS TypeIdentifier (WS TypeParameters)? (WS ClassExtends)? (WS ClassImplements)? WS ClassBody
  {NormalClassDeclaration(mods=$0$0, name=$3, typeParams=$4, extendings=$5, impls=$6, body=$8)}


ClassModifier: %ClassModifier =
  ("public" {%PUBLIC} | "protected" {%PROTECTED} | "private" {%PRIVATE} | "abstract" {%ABSTRACT} |
   "static" {%STATIC} | "final" {%FINAL})&Tk

TypeParameters = '<' WS TypeParameterList WS '>' {TypeParameters(params=$2)}
TypeParameterList = TypeParameter (WS ',' WS TypeParameter)* {[$0] + $1}

TypeParameter = TypeIdentifier (WS TypeBound)? {TypeParameter(typeName=$0, bound=$1)}
TypeBound: TypeBound = "extends"&Tk WS ClassOrInterfaceType (WS AdditionalBound)* {ExtendingConcrete(typ=$2, additional=$3)}
AdditionalBound = '&' WS InterfaceType {AdditionalBound(interfaceType=$2)}


ClassExtends = "extends"&Tk WS ClassType {ClassExtends(ext=$2)}
ClassImplements = "implements"&Tk WS InterfaceTypeList {ClassImplements(impls=$2)}
InterfaceTypeList = InterfaceType (WS ',' WS InterfaceType)* {[$0] + $1}


ClassBody = '{' (WS ClassBodyDeclaration)* WS '}' {ClassBody(decls=$1)}
ClassBodyDeclaration: ClassBodyDeclaration =
    ClassMemberDeclaration
  | InstanceInitializer
  | StaticInitializer
  | ConstructorDeclaration
ClassMemberDeclaration: ClassMemberDeclaration = FieldDeclaration | MethodDeclaration

InstanceInitializer = Block {InstanceInitializer(block=$0)}
StaticInitializer = "static"&Tk WS Block {StaticInitializer(block=$2)}

ConstructorDeclaration =
    (ConstructorModifier WS)* ConstructorDeclarator (WS Throws)? WS ConstructorBody
    {ConstructorDeclaration(modifiers=$0$0, decl=$1, thros=$2, body=$4)}
ConstructorModifier: %ConstructorModifier = ("public" {%PUBLIC} | "protected" {%PROTECTED} | "private" {%PRIVATE})&Tk
ConstructorDeclarator =
    (TypeParameters WS)? SimpleTypeName WS '(' (WS FormalParameterList)? WS ')'
    {ConstructorDeclarator(typeParams=$0$0, name=$1, params=$4 ?: [])}
SimpleTypeName = TypeIdentifier

FieldDeclaration =
    (FieldModifier WS)* Type WS VariableDeclaratorList WS ';'
    {FieldDeclaration(modifiers=$0$0, typ=$1, decls=$3)}
FieldModifier: %FieldModifier =
    ("public" {%PUBLIC} | "protected" {%PROTECTED} | "private" {%PRIVATE} | "static" {%STATIC} | "final" {%FINAL})&Tk
VariableDeclaratorList = VariableDeclarator (WS ',' WS VariableDeclarator)* {[$0] + $1}
VariableDeclarator = VariableDeclaratorId (WS '=' WS VariableInitializer)? {VariableDeclarator(ident=$0, initializer=$1)}
VariableDeclaratorId = Identifier (WS Dims)? {VariableDeclaratorId(name=$0, dims=$1)}
VariableInitializer: VariableInitializer = Expression | ArrayInitializer

ArrayInitializer = '{' (WS VariableInitializerList)? (WS ',')? WS '}' {ArrayInitializer(elems=$1 ?: [])}
VariableInitializerList = VariableInitializer (WS ',' WS VariableInitializer)* {[$0] + $1}

Type: Type = PrimitiveType | ReferenceType
PrimitiveType: PrimitiveType = NumericType | "boolean" {BooleanType()}
NumericType: NumericType = IntegralType | FloatingPointType
IntegralType: IntegralType =
    ("byte" {ByteType()} | "short" {ShortType()} | "int" {IntType()} | "long" {LongType()} | "char" {CharType()})&Tk
FloatingPointType: FloatingPointType = ("float" {FloatType()} | "double" {DoubleType()})&Tk
ReferenceType: ReferenceType = ClassOrInterfaceType | ArrayType
ClassOrInterfaceType: ClassOrInterfaceType =
    TypeIdentifier (WS TypeArguments)?
    {UnqualifiedClassOrInterfaceType(name=$0, typeArgs=$1)}
  | PackageName WS '.' WS TypeIdentifier (WS TypeArguments)?
    {CanonicalClassOrInterfaceType(pkg=$0, typeId=$4, typeArgs=$5)}
  | ClassOrInterfaceType WS '.' WS TypeIdentifier (WS TypeArguments)?
    {ClassOrInterfaceOfOtherType(parent=$0, typeId=$4, typeArgs=$5)}
ClassType = ClassOrInterfaceType
InterfaceType = ClassOrInterfaceType
ArrayType = PrimitiveType WS Dims {ArrayType(elemType: Type = $0, dims=$2)}
  | ClassOrInterfaceType WS Dims {ArrayType($0, $2)}
Dims = '[' WS ']' (WS '[' WS ']')* {[$2] + $3}


MethodDeclaration =
    (MethodModifier WS)* MethodHeader WS MethodBody
    {MethodDeclaration(modifiers=$0$0, header=$1, body=$3)}
MethodModifier: %MethodModifier =
    ("public" {%PUBLIC} | "protected" {%PROTECTED} | "private" {%PRIVATE} | "abstract" {%ABSTRACT} |
     "static" {%STATIC} | "final" {%FINAL} | "native" {%NATIVE})&Tk

MethodHeader =
    (TypeParameters WS)? Result WS MethodDeclarator (WS Throws)?
    {MethodHeader(typeParams=$0$0, resultType=$1, decl=$3, throws=$4)}
Result: Result = Type | "void"&Tk {VoidResult()}
MethodDeclarator = Identifier '(' (WS FormalParameterList)? WS ')' {MethodDeclarator(name=$0, params=$2 ?: [])}

FormalParameterList = FormalParameter (WS ',' WS FormalParameter)* {[$0] + $1}
FormalParameter: FormalParameter = 
    (VariableModifier WS)* Type WS VariableDeclaratorId
    {SoloParameter(modifiers=$0$0, paramType=$1, name=$3)}
  | VariableArityParameter
VariableArityParameter =
    (VariableModifier WS)* Type WS "..."&Tk WS Identifier
    {VariableArityParameter(modifiers=$0$0, paramType=$1, name=$5)}
VariableModifier: %VariableModifier = "final"&Tk {%FINAL}


Throws = "throws"&Tk WS ExceptionTypeList {Throws(types=$2)}
ExceptionTypeList = ExceptionType (WS ',' WS ExceptionType)* {[$0] + $1}
ExceptionType: ExceptionType = ClassOrInterfaceType

MethodBody: MethodBody = Block | ';' {EmptyMethodBody()}
Block = '{' (WS BlockStatements)? WS '}' {Block(stmts=$1 ?: [])}

ConstructorBody =
    '{' (WS ExplicitConstructorInvocation)? (WS BlockStatements)? WS '}'
    {ConstructorBody(constructorInvocation=$1, stmts=$2 ?: [])}

ExplicitConstructorInvocation =
    (TypeArguments WS)? "this"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | (TypeArguments WS)? "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | ExpressionName WS '.' (WS TypeArguments)? WS "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | Primary WS '.' (WS TypeArguments)? WS "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'

EnumDeclaration =
    (ClassModifier WS)* "enum"&Tk WS TypeIdentifier (WS ClassImplements)? WS EnumBody
    {EnumDeclaration(modifiers=$0$0, name=$3, impls=$4, body=$6)}

EnumBody =
    '{' (WS EnumConstantList)? (WS ',')? (WS EnumBodyDeclarations)? WS '}'
    {EnumBody(consts=$1 ?: [], decls=$3)}
EnumConstantList = EnumConstant (WS ',' WS EnumConstant)* {[$0] + $1}
EnumConstant = Identifier (WS '(' (WS ArgumentList)? WS ')')? {EnumConstant(name=$0, args=$1$2 ?: [])}
ArgumentList = Expression (WS ',' WS Expression)* {[$0] + $1}
EnumBodyDeclarations = ';' (WS ClassBodyDeclaration)*



InterfaceDeclaration: InterfaceDeclaration = NormalInterfaceDeclaration
NormalInterfaceDeclaration =
    (InterfaceModifier WS)* "interface"&Tk WS TypeIdentifier (WS TypeParameters)? (WS InterfaceExtends)? WS InterfaceBody
    {NormalInterfaceDeclaration(modifiers=$0$0, name=$3, typeParams=$4, extendings=$5, body=$7)}
InterfaceModifier: %InterfaceModifier =
    ("public" {%PUBLIC} | "protected" {%PROTECTED} | "private" {%PRIVATE} | "abstract" {%ABSTRACT} | "static" {%STATIC})&Tk
InterfaceExtends = "extends"&Tk WS InterfaceTypeList {InterfaceExtends(extendings=$2)}

InterfaceBody = '{' (WS InterfaceMemberDeclaration)* WS '}' {InterfaceBody(decls=$1)}
InterfaceMemberDeclaration: InterfaceMemberDeclaration = ConstantDeclaration | InterfaceMethodDeclaration
ConstantDeclaration =
    (ConstantModifier WS)* Type WS VariableDeclaratorList WS ';'
    {ConstantDeclaration(modifiers=$0$0, typ=$1, decls=$3)}
ConstantModifier: %ConstantModifier = ("public" {%PUBLIC} | "static" {%STATIC} | "final" {%FINAL})&Tk
InterfaceMethodDeclaration =
    (InterfaceMethodModifier WS)* MethodHeader WS MethodBody
    {InterfaceMethodDeclaration(modifiers=$0$0, header=$1, body=$3)}
InterfaceMethodModifier: %InterfaceMethodModifier =
    ("public" {%PUBLIC} | "private" {%PRIVATE} | "abstract" {%ABSTRACT} | "default" {%DEFAULT} | "static" {%STATIC})&Tk




BlockStatements = BlockStatement (WS BlockStatement)* {[$0] + $1}
BlockStatement: BlockStatement = LocalVariableDeclarationStatement | Statement

LocalVariableDeclarationStatement = LocalVariableDeclaration WS ';' {LocalVariableDeclarationStatement(decl=$0)}

LocalVariableDeclaration =
    (VariableModifier WS)* LocalVariableType WS VariableDeclaratorList
    {LocalVariableDeclaration(modifiers=$0$0, typ=$1, decls=$3)}
LocalVariableType = Type



Statement: Statement =
    StatementWithoutTrailingSubstatement
  | LabeledStatement
  | IfThenStatement
  | IfThenElseStatement
  | WhileStatement
  | ForStatement
StatementNoShortIf: StatementNoShortIf<Statement> =
    StatementWithoutTrailingSubstatement
  | LabeledStatementNoShortIf
  | IfThenElseStatementNoShortIf
  | WhileStatementNoShortIf
  | ForStatementNoShortIf
StatementWithoutTrailingSubstatement: StatementWithoutTrailingSubstatement =
    Block
  | EmptyStatement
  | ExpressionStatement
  | DoStatement
  | BreakStatement
  | ContinueStatement
  | ReturnStatement
  | ThrowStatement
  | TryStatement


LabeledStatement = Identifier WS ':' WS Statement {LabeledStatement(label=$0, stmt=$4)}
LabeledStatementNoShortIf = Identifier WS ':' WS StatementNoShortIf {LabeledStatement(label=$0, stmt=$4)}

IfThenStatement = "if"&Tk WS '(' WS Expression WS ')' WS Statement {IfStatement(cond=$4, thenPart=$8, elsePart=null)}


IfThenElseStatement =
    "if"&Tk WS '(' WS Expression WS ')' WS StatementNoShortIf WS "else"&Tk WS Statement
    {IfStatement($4, $8, $12)}
IfThenElseStatementNoShortIf =
    "if"&Tk WS '(' WS Expression WS ')' WS StatementNoShortIf WS "else"&Tk WS StatementNoShortIf
    {IfStatement($4, $8, $12)}


WhileStatement = "while"&Tk WS '(' WS Expression WS ')' WS Statement {WhileStatement(cond=$4, body=$8)}
WhileStatementNoShortIf = "while"&Tk WS '(' WS Expression WS ')' WS StatementNoShortIf {WhileStatement(cond=$4, body=$8)}



ForStatement = BasicForStatement
BasicForStatement =
    "for"&Tk WS '(' (WS ForInit)? WS ';' (WS Expression)? WS ';' (WS ForUpdate)? WS ')' WS Statement
    {BasicForStatement(forInit=$3, cond=$6, forUpdate=$9, body=$13)}
BasicForStatementNoShortIf =
    "for"&Tk WS '(' (WS ForInit)? WS ';' (WS Expression)? WS ';' (WS ForUpdate)? WS ')' WS StatementNoShortIf
    {BasicForStatement(forInit=$3, cond=$6, forUpdate=$9, body=$13)}
ForInit: ForInit = StatementExpressionList | LocalVariableDeclaration
ForUpdate = StatementExpressionList
StatementExpressionList = StatementExpression (WS ',' WS StatementExpression)* {StatementExpressionList(exprs=[$0] + $1)}



ForStatementNoShortIf = BasicForStatementNoShortIf

EmptyStatement = ';' {EmptyStatement()}

ExpressionStatement = StatementExpression WS ';' {ExpressionStatement(expression=$0)}
StatementExpression: StatementExpression = Assignment
  | PreIncrementExpression
  | PreDecrementExpression
  | PostIncrementExpression
  | PostDecrementExpression
  | MethodInvocation
  | ClassInstanceCreationExpression


DoStatement =
    "do"&Tk WS Statement WS "while" WS '(' WS Expression WS ')' WS ';'
    {DoStatement(body=$2, condition=$8)}

BreakStatement = "break"&Tk (WS Identifier)? WS ';' {BreakStatement(label=$1)}
ContinueStatement = "continue"&Tk (WS Identifier)? WS ';' {ContinueStatement(label=$1)}


ReturnStatement = "return"&Tk (WS Expression)? WS ';' {ReturnStatement(returnValue=$1)}
ThrowStatement = "throw"&Tk WS Expression WS ';' {ThrowStatement(throwValue=$2)}



TryStatement =
    "try"&Tk WS Block WS Catches {TryStatement(body=$2, catches=$4, fin=null)}
  | "try"&Tk WS Block (WS Catches)? WS Finally {TryStatement(body=$2, catches=$3 ?: [], fin=$5)}
Catches = CatchClause (WS CatchClause)* {[$0] + $1}
CatchClause = "catch"&Tk WS '(' WS CatchFormalParameter WS ')' WS Block {CatchClause(catchParams=$4, body=$8)}
CatchFormalParameter =
    (VariableModifier WS)* CatchType WS VariableDeclaratorId
    {CatchFormalParameter(modifiers=$0$0, typ=$1, decl=$3)}
CatchType = ClassType (WS '|' WS ClassType)* {CatchType(types=[$0] + $1)}
Finally = "finally"&Tk WS Block




Expression: Expression = LambdaExpression | AssignmentExpression

LambdaExpression = LambdaParameters WS "->"&Tk WS LambdaBody {LambdaExpression(params=$0, body=$4)}

LambdaParameters: LambdaParameters =
    Identifier {SingleLambdaParameter(name=$0)}
  | '(' (WS LambdaParameterList)? WS ')' {NonSingleLambdaParameters(params=$1)}
LambdaParameterList: LambdaParameterList =
    LambdaParameter (WS ',' WS LambdaParameter)* {CanonicalLambdaParameters(params=[$0] + $1)}
  | Identifier (WS ',' WS Identifier)* {NameOnlyLambdaParameters(params=[$0] + $1)}
LambdaParameter: LambdaParameter =
    (VariableModifier WS)* LambdaParameterType WS VariableDeclaratorId
    {SoloLambdaParameter(modifiers=$0$0, typ=$1, decl=$3)}
  | VariableArityParameter
LambdaParameterType = Type

LambdaBody: LambdaBody = Expression | Block


AssignmentExpression: AssignmentExpression = ConditionalExpression
  | Assignment
Assignment = LeftHandSide WS AssignmentOperator WS Expression {Assignment(op=$2, lhs=$0, rhs=$4)}
LeftHandSide: LeftHandSide = ExpressionName
  | FieldAccess
  | ArrayAccess
AssignmentOperator: %AssignmentOperator =
    ("=" {%ASSIGN} | "*=" {%MUL_ASSIGN} | "/=" {%DIV_ASSIGN} | "%=" {%REM_ASSIGN} | "+=" {%ADD_ASSIGN} |
     "-=" {%SUB_ASSIGN} | "<<=" {%SHL_ASSIGN} | ">>=" {%SHR_ASSIGN} | ">>>=" {%SHRZ_ASSIGN} | 
     "&=" {%AND_ASSIGN} | "^=" {%XOR_ASSIGN} | "|=" {%OR_ASSIGN})&Tk

FieldAccess: FieldAccess = Primary WS '.' WS Identifier
  | "super"&Tk WS '.' WS Identifier
  | TypeName WS '.' WS "super"&Tk WS '.' WS Identifier

ArrayAccess: ArrayAccess = ExpressionName WS '[' WS Expression WS ']' {NameArrayAccess(name=$0, index=$4)}
  | PrimaryNoNewArray WS '[' WS Expression WS ']' {PrimaryArrayAccess(name=$0, index=$4)}
  | ArrayCreationExpressionWithInitializer WS '[' WS Expression WS ']' {CreatedArrayAccess(array=$0, index=$4)}



ConditionalExpression: ConditionalExpression = ConditionalOrExpression
  | ConditionalOrExpression WS '?' WS Expression WS ':' WS ConditionalExpression
    {ConditionalValueExpression(condition=$0, thenExpr=$4, elseExpr=$8)}
  | ConditionalOrExpression WS '?' WS Expression WS ':' WS LambdaExpression
    {ConditionalLambdaExpression(condition=$0, thenExpr=$4, elseExpr=$8)}


ConditionalOrExpression: ConditionalOrExpression = ConditionalAndExpression
  | ConditionalOrExpression WS "||"&Tk WS ConditionalAndExpression
    {BinOp(op:%BinOps=%CONDITIONAL_OR, lhs=$0, rhs=$4)}
ConditionalAndExpression: ConditionalAndExpression = InclusiveOrExpression
  | ConditionalAndExpression WS "&&"&Tk WS InclusiveOrExpression
    {BinOp(%CONDITIONAL_AND, $0, $4)}
InclusiveOrExpression: InclusiveOrExpression = ExclusiveOrExpression
  | InclusiveOrExpression WS "|"&Tk WS ExclusiveOrExpression
    {BinOp(%INCLUSIVE_OR, $0, $4)}
ExclusiveOrExpression: ExclusiveOrExpression = AndExpression
  | ExclusiveOrExpression WS "^"&Tk WS AndExpression
    {BinOp(%EXCLUSIVE_OR, $0, $4)}
AndExpression: AndExpression = EqualityExpression
  | AndExpression WS "&"&Tk WS EqualityExpression
    {BinOp(%AND, $0, $4)}
EqualityExpression: EqualityExpression = RelationalExpression
  | EqualityExpression WS "=="&Tk WS RelationalExpression
    {BinOp(%EQ, $0, $4)}
  | EqualityExpression WS "!="&Tk WS RelationalExpression
    {BinOp(%NE, $0, $4)}
RelationalExpression: RelationalExpression = ShiftExpression
  | RelationalExpression WS "<"&Tk WS ShiftExpression
    {BinOp(%GT, $0, $4)}
  | RelationalExpression WS ">"&Tk WS ShiftExpression
    {BinOp(%LT, $0, $4)}
  | RelationalExpression WS "<="&Tk WS ShiftExpression
    {BinOp(%GE, $0, $4)}
  | RelationalExpression WS ">="&Tk WS ShiftExpression
    {BinOp(%LE, $0, $4)}
  | InstanceofExpression
InstanceofExpression =
    RelationalExpression WS "instanceof"&Tk WS ReferenceType
    {InstanceofExpression(lhs=$0, rhs=$4)}
ShiftExpression: ShiftExpression = AdditiveExpression
  | ShiftExpression WS "<<"&Tk WS AdditiveExpression
    {BinOp(%SHL, $0, $4)}
  | ShiftExpression WS ">>"&Tk WS AdditiveExpression
    {BinOp(%SHR, $0, $4)}
  | ShiftExpression WS ">>>"&Tk WS AdditiveExpression
    {BinOp(%SHRZ, $0, $4)}
AdditiveExpression: AdditiveExpression = MultiplicativeExpression
  | AdditiveExpression WS "+"&Tk WS MultiplicativeExpression
    {BinOp(%ADD, $0, $4)}
  | AdditiveExpression WS "-"&Tk WS MultiplicativeExpression
    {BinOp(%SUB, $0, $4)}
MultiplicativeExpression: MultiplicativeExpression = UnaryExpression
  | MultiplicativeExpression WS "*"&Tk WS UnaryExpression
    {BinOp(%MUL, $0, $4)}
  | MultiplicativeExpression WS "/"&Tk WS UnaryExpression
    {BinOp(%DIV, $0, $4)}
  | MultiplicativeExpression WS "%"&Tk WS UnaryExpression
    {BinOp(%REM, $0, $4)}


UnaryExpression: UnaryExpression = PreIncrementExpression
  | PreDecrementExpression
  | "+"&Tk WS UnaryExpression {UnaryOp(op:%UnaryOps=%PLUS, operand=$2)}
  | "-"&Tk WS UnaryExpression {UnaryOp(%MINUS, $2)}
  | UnaryExpressionNotPlusMinus
PreIncrementExpression = "++"&Tk WS UnaryExpression {UnaryOp(%INCREMENT, $2)}
PreDecrementExpression = "--"&Tk WS UnaryExpression {UnaryOp(%DECREMENT, $2)}
UnaryExpressionNotPlusMinus: UnaryExpressionNotPlusMinus = PostfixExpression
  | "~"&Tk WS UnaryExpression {UnaryOp(%TILDE, $2)}
  | "!"&Tk WS UnaryExpression {UnaryOp(%NEG, $2)}
  | CastExpression


CastExpression: CastExpression =
    '(' WS PrimitiveType WS ')' WS UnaryExpression
    {CastToPrimitiveType(typ=$2, operand=$6)}
  | '(' WS ReferenceType (WS AdditionalBound)* WS ')' WS UnaryExpressionNotPlusMinus
    {CastToReferenceType(typ=$2, bounds=$3, operand=$7)}
  | '(' WS ReferenceType (WS AdditionalBound)* WS ')' WS LambdaExpression
    {CastLambda(typ=$2, bounds=$3, operand=$7)}








PostfixExpression: PostfixExpression = Primary
  | ExpressionName
  | PostIncrementExpression
  | PostDecrementExpression
PostIncrementExpression = PostfixExpression WS "++"&Tk {PostIncrementExpression(operand=$0)}
PostDecrementExpression = PostfixExpression WS "--"&Tk {PostDecrementExpression(operand=$0)}


Primary: Primary = PrimaryNoNewArray
  | ArrayCreationExpression
PrimaryNoNewArray: PrimaryNoNewArray = Literal
  | ClassLiteral
  | "this"&Tk {This(parent=null)}
  | TypeName WS '.' WS "this"&Tk {This(parent=$0)}
  | '(' WS Expression WS ')' {Paren(expr=$2)}
  | ClassInstanceCreationExpression
  | FieldAccess
  | ArrayAccess
  | MethodInvocation
  | MethodReference


Literal: Literal = IntegerLiteral
  | FloatingPointLiteral
  | BooleanLiteral
  | CharacterLiteral
  | StringLiteral
  | NullLiteral

IntegerLiteral: IntegerLiteral = DecimalIntegerLiteral
  | HexIntegerLiteral
  | OctalIntegerLiteral
  | BinaryIntegerLiteral
DecimalIntegerLiteral = DecimalNumeral (WS IntegerTypeSuffix)? {DecimalIntegerLiteral(numeral=$0, suffix=$1)}
HexIntegerLiteral = HexNumeral (WS IntegerTypeSuffix)? {HexIntegerLiteral(numeral=$0, suffix=$1)}
OctalIntegerLiteral = OctalNumeral (WS IntegerTypeSuffix)? {OctalIntegerLiteral(numeral=$0, suffix=$1)}
BinaryIntegerLiteral = BinaryNumeral (WS IntegerTypeSuffix)? {BinaryIntegerLiteral(numeral=$0, suffix=$1)}
IntegerTypeSuffix: %IntegerTypeSuffix = 'lL' {%LONG_TYPE}

DecimalNumeral = '0' {DecimalNumeral(value="0")}
  | '1-9' Digits? {DecimalNumeral(value=str($0, $1))}
Digits = '0-9' ('_'? '0-9')* {str($0, $1)}

HexNumeral = '0' 'xX' HexDigits {HexNumeral(value=$2)}
HexDigits = '0-9A-Fa-f' HexDigit* {str($0, $1)}
HexDigit = '_'? '0-9A-Fa-f'

OctalNumeral = '0' OctalDigits {OctalNumeral(value=$1)}
OctalDigits = '0-7' OctalDigit* {str($0, $1)}
OctalDigit = '_'? '0-7'

BinaryNumeral = '0' 'bB' BinaryDigits {BinaryNumeral(value=$2)}
BinaryDigits = '01' BinaryDigit* {str($0, $1)}
BinaryDigit = '_'? '01'

FloatingPointLiteral = DecimalFloatingPointLiteral
DecimalFloatingPointLiteral =
    Digits '.' Digits? ExponentPart? FloatTypeSuffix?
    {FloatingPointLiteral(intPart=$0, fracPart=$2, expPart=$3, typeSuffix=$4)}
  | '.' Digits ExponentPart? FloatTypeSuffix? {FloatingPointLiteral(intPart=null, fracPart=$1, expPart=$2, typeSuffix=$3)}
  | Digits ExponentPart FloatTypeSuffix {FloatingPointLiteral(intPart=$0, fracPart=null, expPart=$1, typeSuffix=$2)}
  | Digits ExponentPart {FloatingPointLiteral(intPart=$0, fracPart=null, expPart=$1, typeSuffix=null)}
  | Digits FloatTypeSuffix {FloatingPointLiteral(intPart=$0, fracPart=null, expPart=null, typeSuffix=$1)}
ExponentPart = 'eE' SignedInteger {ExponentPart(exponent=$1)}
SignedInteger = ('+' | '-')? Digits {SignedInteger(sign=$0, digits=$1)}
FloatTypeSuffix: %FloatTypeSuffix = 'fF' {%FLOAT_TYPE} | 'dD' {%DOUBLE_TYPE}

BooleanLiteral: BooleanLiteral = ("true" {TrueLiteral()} | "false" {FalseLiteral()})&Tk

CharacterLiteral: CharacterLiteral = '\'' SingleCharacter '\'' {SingleCharacterLiteral(value=$1)}
  | '\'' EscapeSequence '\'' {EscapeCharacterLiteral(escapeSeq=$1)}
SingleCharacter = InputCharacter-'\'\\' {SingleCharacter(value=$0)}
InputCharacter = .-'\r\n'
EscapeSequence: EscapeSequence = '\\' 'bstnfr\n"\'\\' {EscapeCode(code=$1)}
  | <'\\' '0-7' {OctalEscapeSequence(value=str($1))}
  | '\\' '0-7' '0-7' {OctalEscapeSequence(value=str($1, $2))}
  | '\\' '0-3' '0-7' '0-7' {OctalEscapeSequence(value=str($1, $2, $3))}>

StringLiteral = '"' StringCharacter* '"' {StringLiteral(chars=$1)}
StringCharacter: StringCharacter = StringSingleCharacter
  | EscapeSequence
StringSingleCharacter = InputCharacter-'"\\' {StringSingleCharacter(value=$0)}

NullLiteral = "null"&Tk {NullLiteral()}


ClassLiteral: ClassLiteral = TypeName (WS '[' WS ']')* WS '.' WS "class"&Tk {ClassOfTypeName(typeName=$0, dims=$1)}
  | NumericType (WS '[' WS ']')* WS '.' WS "class"&Tk {ClassOfNumericType(typ=$0, dims=$1)}
  | "boolean"&Tk (WS '[' WS ']')* WS '.' WS "class"&Tk {ClassOfBooleanType(dims=$1)}
  | "void"&Tk WS '.' WS "class"&Tk {ClassOfVoidType()}



ClassInstanceCreationExpression: ClassInstanceCreationExpression = UnqualifiedClassInstanceCreationExpression
  | ExpressionName WS "."&Tk WS UnqualifiedClassInstanceCreationExpression
    {ContextClassInstanceCreationExpressionByName(context=$0, creation=$4)}
  | Primary WS "."&Tk WS UnqualifiedClassInstanceCreationExpression
    {ContextClassInstanceCreationExpressionByPrimary(context=$0, creation=$4)}


UnqualifiedClassInstanceCreationExpression =
    "new"&Tk (WS TypeArguments)? WS ClassOrInterfaceTypeToInstantiate WS '(' (WS ArgumentList)? WS ')' (WS ClassBody)?
    {UnqualifiedClassInstanceCreationExpression(typeArgs=$1, typeToInstantiate=$3, args=$6 ?: [], body=$9)}
ClassOrInterfaceTypeToInstantiate =
    Identifier (WS '.' WS Identifier)* (WS TypeArgumentsOrDiamond)?
    {TypeToInstantiate(name=[$0] + $1, typeArgs=$2)}
TypeArgumentsOrDiamond: TypeArgumentsOrDiamond = TypeArguments | '<' WS '>' {DiamondTypeArguments()}

TypeArguments = '<' WS TypeArgumentList WS '>' {TypeArguments(typeArgs=$2)}
TypeArgumentList = TypeArgument (WS ',' WS TypeArgument)* {[$0] + $1}
TypeArgument: TypeArgument = ReferenceType | Wildcard
Wildcard = '?' (WS WildcardBounds)? {Wildcard(bounds=$1)}
WildcardBounds: WildcardBounds =
    "extends"&Tk WS ReferenceType {ExtendsBound(typ=$2)}
  | "super"&Tk WS ReferenceType {SuperBound(typ=$2)}




MethodInvocation: MethodInvocation =
    MethodName WS MethodArgumentList
    {PlainMethodInvocation(target=$0, args=$2)}
  | TypeOrExpressionName WS '.' (WS TypeArguments)? WS Identifier WS MethodArgumentList
    {NameMethodInvocation(target=$0, typeArgs=$3, name=$5, args=$7)}
  | Primary WS '.' (WS TypeArguments)? WS Identifier WS MethodArgumentList
    {PrimaryMethodInvocation(target=$0, typeArgs=$3, name=$5, args=$7)}
  | "super"&Tk WS '.' (WS TypeArguments)? WS Identifier WS MethodArgumentList
    {SuperMethodInvocation(target=null, typeArgs=$3, name=$5, args=$7)}
  | TypeName WS '.' WS "super"&Tk WS '.' (WS TypeArguments)? WS Identifier WS MethodArgumentList
    {SuperMethodInvocation(target=$0, typeArgs=$7, name=$9, args=$11)}
MethodArgumentList = '(' (WS ArgumentList)? WS ')' {$1 ?: []}



MethodReference: MethodReference =
    ExpressionName WS "::"&Tk (WS TypeArguments)? WS Identifier
    {PlainNameMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | ReferenceType WS "::"&Tk (WS TypeArguments)? WS Identifier
    {PlainRefMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | Primary WS "::"&Tk (WS TypeArguments)? WS Identifier
    {PlainPrimaryMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | "super"&Tk WS "::"&Tk (WS TypeArguments)? WS Identifier
    {SuperMethodReference(target=null, typeArgs=$3, name=$5)}
  | TypeName WS '.' WS "super"&Tk WS "::"&Tk (WS TypeArguments)? WS Identifier
    {SuperMethodReference(target=$0, typeArgs=$7, name=$9)}
  | ClassType WS "::"&Tk (WS TypeArguments)? WS "new"&Tk
    {NewMethodReference(cls=$0, typeArgs=$3)}
  | ArrayType WS "::"&Tk WS "new"&Tk
    {NewArrayMethodReference(arrType=$0)}



MethodName = UnqualifiedMethodIdentifier {MethodName(name=$0)}
AmbiguousName = Identifier (WS '.' WS Identifier)* {AmbiguousName(name=[$0] + $1)}

UnqualifiedMethodIdentifier = Identifier-"yield"




ArrayCreationExpression: ArrayCreationExpression =
    ArrayCreationExpressionWithoutInitializer
  | ArrayCreationExpressionWithInitializer
ArrayCreationExpressionWithoutInitializer: ArrayCreationExpressionWithoutInitializer =
    "new"&Tk WS PrimitiveType WS DimExprs (WS Dims)?
    {PrimitiveArrayCreationExpr(typ=$2, dimExprs=$4, dims=$5)}
  | "new"&Tk WS ClassOrInterfaceType WS DimExprs (WS Dims)?
    {ClassOrInterfaceArrayCreationExpr(typ=$2, dimExprs=$4, dims=$5)}
ArrayCreationExpressionWithInitializer: ArrayCreationExpressionWithInitializer =
    "new"&Tk WS PrimitiveType WS Dims WS ArrayInitializer
    {PrimitiveArrayCreationExprWithInit(typ=$2, dims=$4, initializer=$6)}
  | "new"&Tk WS ClassOrInterfaceType WS Dims WS ArrayInitializer
    {ClassOrInterfaceArrayCreationExprWithInit(typ=$2, dims=$4, initializer=$6)}
DimExprs = DimExpr (WS DimExpr)* {[$0] + $1}
DimExpr = '[' WS Expression WS ']' {DimExpr(expr=$2)}



Identifier = <IdentifierChars>-(ReservedKeyword | "true" | "false" | "null") {Identifier(name=$0)}
IdentifierChars = JavaLetter JavaLetterOrDigit* {str($0, $1)}
JavaLetter = 'a-zA-Z_'
JavaLetterOrDigit = 'a-zA-Z_0-9'

Tk = <'a-zA-Z0-9_'+ | TkSeq>
TkSeq = "!" | "!=" | "%" | "%=" | "&" | "&&" | "&=" | "*" | "*=" | "+" | "++" | "+="
  | "-" | "--" | "-=" | "->" | "..." | "/" | "/=" | "::" | "<" | "<<" | "<<=" | "<="
  | "=" | "==" | ">" | ">=" | ">>" | ">>=" | ">>>" | ">>>=" | "^" | "^=" | "|" | "|=" | "||" | "~"
WS = (' \r\n\t' | Comment)*

Comment = LineComment | BlockComment
LineComment = "//" (.-'\n')* (!. | '\n')
BlockComment = "/*" ((. !"*/")* .)? "*/"


TypeOrExpressionName = ExpressionName

TypeName = TypeIdentifier {TypeName(pkg=null, name=$0)}
  | PackageOrTypeName WS '.' WS TypeIdentifier {TypeName(pkg=$0, name=$4)}

ExpressionName: ExpressionName = Identifier
  | AmbiguousName WS '.' WS Identifier {LongExpressionName(ambigName=$0, name=$4)}

TypeIdentifier = Identifier-("permits" | "record" | "sealed" | "var" | "yield") {TypeIdentifier(name=$0)}
PackageOrTypeName = Identifier (WS '.' WS Identifier)* {PackageOrTypeName(name=[$0] + $1)}
PackageName = Identifier (WS '.' WS Identifier)* {PackageName(name=[$0] + $1)}



ReservedKeyword =
  ("abstract" | "continue" | "for" | "new" | "switch" | "assert" | "default" | "if" | "package" | "synchronized" |
   "boolean" | "do" | "goto" | "private" | "this" | "break" | "double" | "implements" | "protected" | "throw" |
   "byte" | "else" | "import" | "public" | "throws" | "case" | "enum" | "instanceof" | "return" | "transient" |
   "catch" | "extends" | "int" | "short" | "try" | "char" | "final" | "interface" | "static" | "void" | "class" |
   "finally" | "long" | "strictfp" | "volatile" | "const" | "float" | "native" | "super" | "while" | "_")&Tk

