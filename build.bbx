import maven
import java
import jvm
import bibix
from bibix.plugins() import scala
from bibix.plugins() import protobuf
from bibix.plugins() import scalatest
from bibix.plugins() import ktjvm

scalaVersion = "2.13"
scalaDep = maven.dep("org.scala-lang", "scala-library", "2.13.8")

protobufVersion = "3.19.4"
protobufDep = maven.dep("com.google.protobuf", "protobuf-java", protobufVersion)

namespace grammarProto {
  schema = protobuf.schema(
    srcs = [
      "base/src/main/proto/GrammarProto.proto",
      "base/src/main/proto/TermGroupProto.proto",
    ]
  )

  javacode = protobuf.java(schema=schema)
  javalib = java.library(
    srcs = javacode,
    deps = [protobufDep]
  )
}

base = scala.library(
  srcs = glob("base/src/main/scala/**/*.scala"),
  deps = [scalaDep, grammarProto.javalib],
)

naive = scala.library(
  srcs = glob("naive/src/main/scala/**/*.scala"),
  deps = [base],
)

utils = scala.library(
  srcs = glob("utils/src/main/scala/**/*.scala"),
  deps = [base],
)

metalang = scala.library(
  srcs = glob("metalang/src/main/scala/**/*.scala"),
  deps = [naive, utils],
)

namespace fastProto {
  schema = protobuf.schema(
    srcs = [
      "fast/src/main/proto/MilestoneParserDataProto.proto",
      "fast/src/main/proto/NaiveParserProto.proto",
    ],
    deps = [grammarProto.schema]
  )

  javacode = protobuf.java(schema=schema)
  javalib = java.library(
    srcs = javacode,
    deps = [grammarProto.javalib]
  )
}

fast = scala.library(
  srcs = glob("fast/src/main/scala/**/*.scala"),
  deps = [naive, metalang, fastProto.javalib],
)

cli = scala.library(
  srcs = glob("cli/src/main/scala/**/*.scala") + [
    "cli/src/generated/scala/com/giyeok/jparser/cli/MetaLang3Ast.scala"
  ],
  deps = [
    naive, utils, metalang, fast,
    maven.dep("info.picocli", "picocli", "4.6.1"),
  ],
  // resources = ["cli/src/generated/resources/cdglang3.pb"],
)

cliUberJar = jvm.executableUberJar(
  deps = [cli],
  mainClass = "com.giyeok.jparser.cli.Main",
  jarFileName = "jparser-cli.jar"
)

namespace tests {
  testDeps = [
    maven.dep("org.scalatest", "scalatest_$scalaVersion", "3.2.11"),
    // maven.dep("junit", "junit", "4.12"),
    maven.dep("org.junit.jupiter", "junit-jupiter-api", "5.8.2"),
  ]

  baseTests = scala.library(
    srcs = glob("base/src/test/scala/**/*.scala"),
    deps = testDeps + [base],
  )

  naiveTests = scala.library(
    srcs = glob("naive/src/test/scala/**/*.scala"),
    deps = testDeps + [baseTests, naive],
  )

  metalangTests = scala.library(
    srcs = glob("metalang/src/test/scala/**/*.scala"),
    deps = testDeps + [baseTests, naiveTests, metalang],
  )

  action run = scalatest.run(
    deps = [baseTests, naiveTests, metalangTests]
  )

  examples = scala.library(
    srcs = glob("examples/src/main/scala/**/*.scala"),
    // resources = glob("examples/src/main/resources/**"),
    deps = [baseTests, naiveTests, metalangTests],
  )
}

all = [base, naive, utils, metalang, fast, tests.examples]

visualize = scala.library(
  // TODO 해시를 모든 argument를 합쳐서 하지 말고 세분화할 방법을 고안해야함
  srcs = glob("visualize/src/main/scala/**/*.scala"),
  deps = [
    base,
    naive,
    utils,
    metalang,
    fast,
    tests.examples,

    maven.dep("io.reactivex.rxjava3", "rxjava", "3.1.4"),
    maven.dep("org.scala-lang.modules", "scala-xml_$scalaVersion", "1.2.0"),

    // 지금은 리눅스에서만 실행 가능.. SWT 집어 치워야겠다
    jvm.lib("visualize/lib/swt-4.6.2-gtk-linux-x86_64-4.6.2.jar"),
    maven.dep("org.eclipse", "jface", "3.3.0-I20070606-0010"),
    jvm.lib("visualize/lib/org.eclipse.draw2d_3.10.1.201508170204.jar"),
    jvm.lib("visualize/lib/org.eclipse.zest.core_1.5.201.201508170204.jar"),
    jvm.lib("visualize/lib/org.eclipse.zest.layouts_1.1.200.201508170204.jar"),
    jvm.lib("visualize/lib/gviz-0.0.1.jar"),
  ],
)

parserStudio3 = ktjvm.library(
  srcs = glob("visualize/src/main/kotlin/**/*.kt"),
  deps = [
    visualize,
    maven.dep("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", "1.6.20"),
    maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-core", "1.6.1"),
    maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-jdk8", "1.6.1"),
    maven.dep("org.jetbrains.kotlinx", "kotlinx-coroutines-swing", "1.6.1"),
  ],
)

action parserStudio2 = jvm.run(
  deps = [visualize],
  mainClass = "com.giyeok.jparser.studio2.ParserStudio2",
)

action parserStudio = jvm.run(
  deps = [parserStudio3],
  mainClass = "com.giyeok.jparser.studio3.ParserStudio3",
)

study = scala.library(
  srcs = glob("study/src/main/scala/**/*.scala"),
  deps = [naive, utils, metalang, visualize, fast, tests.examples],
)

class JParserData = (astFile: file, dataFile: file)

parsergenImpl = ktjvm.library(
  srcs=glob("bibix/src/main/kotlin/**/*.kt"),
  deps=[fast],
)

def parsergen(
  src: file,
  objectName: string,
  parserDataFileName: string,
): JParserData = parsergenImpl:com.giyeok.jparser.bibix.ParserGen
