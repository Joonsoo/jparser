package com.giyeok.jparser.metalang3a.generated

import com.giyeok.jparser.{Inputs, NGrammar, ParsingErrors}
import com.giyeok.jparser.ParseResultTree.BindNode
import com.giyeok.jparser.ParseResultTree.Node
import com.giyeok.jparser.ParseResultTree.SequenceNode
import com.giyeok.jparser.ParseResultTree.TerminalNode
import com.giyeok.jparser.nparser.{NaiveParser, ParseTreeUtil, Parser}
import com.giyeok.jparser.nparser.ParseTreeUtil.unrollRepeat0
import com.giyeok.jparser.nparser.ParseTreeUtil.unrollRepeat1
import com.giyeok.jparser.proto.GrammarProto
import com.giyeok.jparser.proto.GrammarProtobufConverter

import java.util.Base64

object MetaLang3Ast {
  val ngrammar: NGrammar = GrammarProtobufConverter.convertProtoToNGrammar(GrammarProto.NGrammar.parseFrom(Base64.getDecoder.decode(
    "")))

  sealed trait WithParseNode {
    val parseNode: Node
  }

  case class AbstractClassDef(name: TypeName, supers: List[TypeName])(override val parseNode: Node) extends ClassDef with WithParseNode

  sealed trait AbstractEnumValue extends Atom with WithParseNode

  sealed trait AdditiveExpr extends ElvisExpr with WithParseNode

  case class AnyTerminal()(override val parseNode: Node) extends Terminal with WithParseNode

  case class AnyType()(override val parseNode: Node) extends NonNullTypeDesc with WithParseNode

  case class ArrayExpr(elems: List[PExpr])(override val parseNode: Node) extends Atom with WithParseNode

  case class ArrayTypeDesc(elemType: TypeDesc)(override val parseNode: Node) extends NonNullTypeDesc with WithParseNode

  sealed trait Atom extends PrefixNotExpr with WithParseNode

  sealed trait AtomSymbol extends PostUnSymbol with WithParseNode

  case class BinOp(op: Op.Value, lhs: BoolAndExpr, rhs: BoolOrExpr)(override val parseNode: Node) extends AdditiveExpr with WithParseNode

  sealed trait BinSymbol extends Symbol with WithParseNode

  case class BindExpr(ctx: ValRef, binder: BinderExpr)(override val parseNode: Node) extends Atom with BinderExpr with WithParseNode

  sealed trait BinderExpr extends WithParseNode

  sealed trait BoolAndExpr extends BoolOrExpr with WithParseNode

  sealed trait BoolEqExpr extends BoolAndExpr with WithParseNode

  case class BoolLiteral(value: Boolean)(override val parseNode: Node) extends Literal with WithParseNode

  sealed trait BoolOrExpr extends TernaryExpr with WithParseNode

  case class BooleanType()(override val parseNode: Node) extends ValueType with WithParseNode

  case class CanonicalEnumValue(enumName: EnumTypeName, valueName: EnumValueName)(override val parseNode: Node) extends AbstractEnumValue with WithParseNode

  case class CharAsIs(value: Char)(override val parseNode: Node) extends StringChar with TerminalChar with TerminalChoiceChar with WithParseNode

  case class CharEscaped(escapeCode: Char)(override val parseNode: Node) extends StringChar with TerminalChar with TerminalChoiceChar with WithParseNode

  case class CharLiteral(value: TerminalChar)(override val parseNode: Node) extends Literal with WithParseNode

  case class CharType()(override val parseNode: Node) extends ValueType with WithParseNode

  case class CharUnicode(code: List[Char])(override val parseNode: Node) extends StringChar with TerminalChar with TerminalChoiceChar with WithParseNode

  sealed trait ClassDef extends SubType with TypeDef with WithParseNode

  case class ClassParamDef(name: ParamName, typeDesc: Option[TypeDesc])(override val parseNode: Node) extends WithParseNode

  case class ConcreteClassDef(name: TypeName, supers: Option[List[TypeName]], params: List[ClassParamDef])(override val parseNode: Node) extends ClassDef with WithParseNode

  sealed trait Def extends WithParseNode

  sealed trait Elem extends WithParseNode

  sealed trait ElvisExpr extends BoolEqExpr with WithParseNode

  case class ElvisOp(value: AdditiveExpr, ifNull: ElvisExpr)(override val parseNode: Node) extends ElvisExpr with WithParseNode

  case class EmptySeq()(override val parseNode: Node) extends AtomSymbol with WithParseNode

  case class EnumTypeDef(name: EnumTypeName, values: List[String])(override val parseNode: Node) extends TypeDef with WithParseNode

  case class EnumTypeName(name: String)(override val parseNode: Node) extends NonNullTypeDesc with WithParseNode

  case class EnumValueName(name: String)(override val parseNode: Node) extends WithParseNode

  case class ExceptSymbol(body: BinSymbol, except: PreUnSymbol)(override val parseNode: Node) extends BinSymbol with WithParseNode

  case class ExprParen(body: PExpr)(override val parseNode: Node) extends Atom with WithParseNode

  case class FollowedBy(followedBy: PreUnSymbol)(override val parseNode: Node) extends PreUnSymbol with WithParseNode

  case class FuncCallOrConstructExpr(funcName: TypeOrFuncName, params: List[PExpr])(override val parseNode: Node) extends Atom with WithParseNode

  case class Grammar(defs: List[Def])(override val parseNode: Node) extends WithParseNode

  case class InPlaceChoices(choices: List[Sequence])(override val parseNode: Node) extends AtomSymbol with WithParseNode

  case class JoinSymbol(body: BinSymbol, join: PreUnSymbol)(override val parseNode: Node) extends BinSymbol with WithParseNode

  case class LHS(name: Nonterminal, typeDesc: Option[TypeDesc])(override val parseNode: Node) extends WithParseNode

  sealed trait Literal extends Atom with WithParseNode

  case class Longest(choices: InPlaceChoices)(override val parseNode: Node) extends AtomSymbol with WithParseNode

  case class NamedConstructExpr(typeName: TypeName, params: List[NamedParam], supers: Option[List[TypeName]])(override val parseNode: Node) extends Atom with WithParseNode

  case class NamedParam(name: ParamName, typeDesc: Option[TypeDesc], expr: PExpr)(override val parseNode: Node) extends WithParseNode

  sealed trait NonNullTypeDesc extends WithParseNode

  case class Nonterminal(name: NonterminalName)(override val parseNode: Node) extends AtomSymbol with WithParseNode

  case class NonterminalName(name: String)(override val parseNode: Node) extends WithParseNode

  case class NotFollowedBy(notFollowedBy: PreUnSymbol)(override val parseNode: Node) extends PreUnSymbol with WithParseNode

  case class NullLiteral()(override val parseNode: Node) extends Literal with WithParseNode

  case class Optional(body: PostUnSymbol)(override val parseNode: Node) extends PostUnSymbol with WithParseNode

  sealed trait PExpr extends WithParseNode

  case class ParamName(name: String)(override val parseNode: Node) extends WithParseNode

  sealed trait PostUnSymbol extends PreUnSymbol with WithParseNode

  sealed trait PreUnSymbol extends BinSymbol with WithParseNode

  sealed trait PrefixNotExpr extends AdditiveExpr with WithParseNode

  case class PrefixOp(op: PreOp.Value, expr: PrefixNotExpr)(override val parseNode: Node) extends PrefixNotExpr with WithParseNode

  sealed trait Processor extends Elem with WithParseNode

  case class ProcessorBlock(body: PExpr)(override val parseNode: Node) extends BinderExpr with Processor with WithParseNode

  case class RawRef(idx: String, condSymPath: Option[List[CondSymDir.Value]])(override val parseNode: Node) extends Ref with WithParseNode

  sealed trait Ref extends Atom with BinderExpr with Processor with WithParseNode

  case class RepeatFromOne(body: PostUnSymbol)(override val parseNode: Node) extends PostUnSymbol with WithParseNode

  case class RepeatFromZero(body: PostUnSymbol)(override val parseNode: Node) extends PostUnSymbol with WithParseNode

  case class Rule(lhs: LHS, rhs: List[Sequence])(override val parseNode: Node) extends Def with WithParseNode

  case class Sequence(seq: List[Elem])(override val parseNode: Node) extends Symbol with WithParseNode

  case class ShortenedEnumValue(valueName: EnumValueName)(override val parseNode: Node) extends AbstractEnumValue with WithParseNode

  case class StrLiteral(value: List[StringChar])(override val parseNode: Node) extends Literal with WithParseNode

  sealed trait StringChar extends WithParseNode

  case class StringSymbol(value: List[StringChar])(override val parseNode: Node) extends AtomSymbol with WithParseNode

  case class StringType()(override val parseNode: Node) extends ValueType with WithParseNode

  sealed trait SubType extends WithParseNode

  case class SuperDef(typeName: TypeName, subs: Option[List[SubType]], supers: Option[List[TypeName]])(override val parseNode: Node) extends SubType with TypeDef with WithParseNode

  sealed trait Symbol extends Elem with WithParseNode

  sealed trait Terminal extends AtomSymbol with WithParseNode

  sealed trait TerminalChar extends Terminal with WithParseNode

  case class TerminalChoice(choices: List[TerminalChoiceElem])(override val parseNode: Node) extends AtomSymbol with WithParseNode

  sealed trait TerminalChoiceChar extends TerminalChoiceElem with WithParseNode

  sealed trait TerminalChoiceElem extends WithParseNode

  case class TerminalChoiceRange(start: TerminalChoiceChar, end: TerminalChoiceChar)(override val parseNode: Node) extends TerminalChoiceElem with WithParseNode

  sealed trait TernaryExpr extends PExpr with WithParseNode

  case class TernaryOp(cond: BoolOrExpr, ifTrue: TernaryExpr, ifFalse: TernaryExpr)(override val parseNode: Node) extends TernaryExpr with WithParseNode

  sealed trait TypeDef extends Def with NonNullTypeDesc with WithParseNode

  case class TypeDesc(typ: NonNullTypeDesc, optional: Boolean)(override val parseNode: Node) extends WithParseNode

  case class TypeName(name: String)(override val parseNode: Node) extends NonNullTypeDesc with SubType with WithParseNode

  case class TypeOrFuncName(name: String)(override val parseNode: Node) extends WithParseNode

  case class TypedPExpr(body: TernaryExpr, typ: TypeDesc)(override val parseNode: Node) extends PExpr with WithParseNode

  case class ValRef(idx: String, condSymPath: Option[List[CondSymDir.Value]])(override val parseNode: Node) extends Ref with WithParseNode

  sealed trait ValueType extends NonNullTypeDesc with WithParseNode

  object CondSymDir extends Enumeration {
    val BODY, COND = Value
  }

  object KeyWord extends Enumeration {
    val BOOLEAN, CHAR, FALSE, NULL, STRING, TRUE = Value
  }

  object Op extends Enumeration {
    val ADD, AND, EQ, NE, OR = Value
  }

  object PreOp extends Enumeration {
    val NOT = Value
  }

  def matchAdditiveExpr(node: Node): AdditiveExpr = {
    val BindNode(v1, v2) = node
    val v20 = v1.id match {
      case 360 =>
        val v3 = v2.asInstanceOf[SequenceNode].children(2)
        val BindNode(v4, v5) = v3
        assert(v4.id == 432)
        val BindNode(v6, v7) = v5
        val v10 = v6.id match {
          case 433 =>
            val BindNode(v8, v9) = v7
            assert(v8.id == 434)
            Op.ADD
        }
        val v11 = v2.asInstanceOf[SequenceNode].children.head
        val BindNode(v12, v13) = v11
        assert(v12.id == 361)
        val v14 = v2.asInstanceOf[SequenceNode].children(4)
        val BindNode(v15, v16) = v14
        assert(v15.id == 359)
        BinOp(v10, matchPrefixNotExpr(v13), matchAdditiveExpr(v16))(v2)
      case 435 =>
        val v17 = v2.asInstanceOf[SequenceNode].children.head
        val BindNode(v18, v19) = v17
        assert(v18.id == 361)
        matchPrefixNotExpr(v19)
    }
    v20
  }

  def matchAnyType(node: Node): AnyType = {
    val BindNode(v21, v22) = node
    val v23 = v21.id match {
      case 133 =>
        AnyType()(v22)
    }
    v23
  }

  def matchArrayExpr(node: Node): ArrayExpr = {
    val BindNode(v24, v25) = node
    val v52 = v24.id match {
      case 401 =>
        val v27 = v25.asInstanceOf[SequenceNode].children(2)
        val BindNode(v28, v29) = v27
        assert(v28.id == 390)
        val BindNode(v30, v31) = v29
        val v51 = v30.id match {
          case 56 =>
            None
          case 391 =>
            val BindNode(v32, v33) = v31
            assert(v32.id == 392)
            val BindNode(v34, v35) = v33
            assert(v34.id == 393)
            val v36 = v35.asInstanceOf[SequenceNode].children.head
            val BindNode(v37, v38) = v36
            assert(v37.id == 347)
            val v39 = v35.asInstanceOf[SequenceNode].children(1)
            val v40 = unrollRepeat0(v39).map { elem =>
              val BindNode(v41, v42) = elem
              assert(v41.id == 396)
              val BindNode(v43, v44) = v42
              val v50 = v43.id match {
                case 397 =>
                  val BindNode(v45, v46) = v44
                  assert(v45.id == 398)
                  val v47 = v46.asInstanceOf[SequenceNode].children(3)
                  val BindNode(v48, v49) = v47
                  assert(v48.id == 347)
                  matchPExpr(v49)
              }
              v50
            }
            Some(List(matchPExpr(v38)) ++ v40)
        }
        val v26 = v51
        ArrayExpr(if (v26.isDefined) v26.get else List())(v25)
    }
    v52
  }

  def matchAtom(node: Node): Atom = {
    val BindNode(v53, v54) = node
    val v79 = v53.id match {
      case 369 =>
        val v55 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v56, v57) = v55
        assert(v56.id == 370)
        matchNamedConstructExpr(v57)
      case 310 =>
        val v58 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v59, v60) = v58
        assert(v59.id == 311)
        matchRef(v60)
      case 416 =>
        val v61 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v62, v63) = v61
        assert(v62.id == 417)
        matchEnumValue(v63)
      case 402 =>
        val v64 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v65, v66) = v64
        assert(v65.id == 403)
        matchLiteral(v66)
      case 399 =>
        val v67 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v68, v69) = v67
        assert(v68.id == 400)
        matchArrayExpr(v69)
      case 384 =>
        val v70 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v71, v72) = v70
        assert(v71.id == 385)
        matchFuncCallOrConstructExpr(v72)
      case 365 =>
        val v73 = v54.asInstanceOf[SequenceNode].children.head
        val BindNode(v74, v75) = v73
        assert(v74.id == 366)
        matchBindExpr(v75)
      case 431 =>
        val v76 = v54.asInstanceOf[SequenceNode].children(2)
        val BindNode(v77, v78) = v76
        assert(v77.id == 347)
        ExprParen(matchPExpr(v78))(v54)
    }
    v79
  }

  def matchAtomSymbol(node: Node): AtomSymbol = {
    val BindNode(v80, v81) = node
    val v103 = v80.id match {
      case 299 =>
        val v82 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v83, v84) = v82
        assert(v83.id == 300)
        matchLongest(v84)
      case 259 =>
        val v85 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v86, v87) = v85
        assert(v86.id == 260)
        matchTerminalChoice(v87)
      case 290 =>
        val v88 = v81.asInstanceOf[SequenceNode].children(2)
        val BindNode(v89, v90) = v88
        assert(v89.id == 291)
        matchInPlaceChoices(v90)
      case 243 =>
        val v91 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v92, v93) = v91
        assert(v92.id == 244)
        matchTerminal(v93)
      case 302 =>
        val v94 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v95, v96) = v94
        assert(v95.id == 303)
        matchEmptySequence(v96)
      case 277 =>
        val v97 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v98, v99) = v97
        assert(v98.id == 278)
        matchStringSymbol(v99)
      case 289 =>
        val v100 = v81.asInstanceOf[SequenceNode].children.head
        val BindNode(v101, v102) = v100
        assert(v101.id == 63)
        matchNonterminal(v102)
    }
    v103
  }

  def matchBinSymbol(node: Node): BinSymbol = {
    val BindNode(v104, v105) = node
    val v121 = v104.id match {
      case 228 =>
        val v106 = v105.asInstanceOf[SequenceNode].children.head
        val BindNode(v107, v108) = v106
        assert(v107.id == 227)
        val v109 = v105.asInstanceOf[SequenceNode].children(4)
        val BindNode(v110, v111) = v109
        assert(v110.id == 230)
        JoinSymbol(matchBinSymbol(v108), matchPreUnSymbol(v111))(v105)
      case 306 =>
        val v112 = v105.asInstanceOf[SequenceNode].children.head
        val BindNode(v113, v114) = v112
        assert(v113.id == 227)
        val v115 = v105.asInstanceOf[SequenceNode].children(4)
        val BindNode(v116, v117) = v115
        assert(v116.id == 230)
        ExceptSymbol(matchBinSymbol(v114), matchPreUnSymbol(v117))(v105)
      case 307 =>
        val v118 = v105.asInstanceOf[SequenceNode].children.head
        val BindNode(v119, v120) = v118
        assert(v119.id == 230)
        matchPreUnSymbol(v120)
    }
    v121
  }

  def matchBindExpr(node: Node): BindExpr = {
    val BindNode(v122, v123) = node
    val v130 = v122.id match {
      case 367 =>
        val v124 = v123.asInstanceOf[SequenceNode].children.head
        val BindNode(v125, v126) = v124
        assert(v125.id == 313)
        val v127 = v123.asInstanceOf[SequenceNode].children(1)
        val BindNode(v128, v129) = v127
        assert(v128.id == 368)
        BindExpr(matchValRef(v126), matchBinderExpr(v129))(v123)
    }
    v130
  }

  def matchBinderExpr(node: Node): BinderExpr = {
    val BindNode(v131, v132) = node
    val v142 = v131.id match {
      case 310 =>
        val v133 = v132.asInstanceOf[SequenceNode].children.head
        val BindNode(v134, v135) = v133
        assert(v134.id == 311)
        matchRef(v135)
      case 365 =>
        val v136 = v132.asInstanceOf[SequenceNode].children.head
        val BindNode(v137, v138) = v136
        assert(v137.id == 366)
        matchBindExpr(v138)
      case 344 =>
        val v139 = v132.asInstanceOf[SequenceNode].children.head
        val BindNode(v140, v141) = v139
        assert(v140.id == 345)
        matchPExprBlock(v141)
    }
    v142
  }

  def matchBoolAndExpr(node: Node): BoolAndExpr = {
    val BindNode(v143, v144) = node
    val v154 = v143.id match {
      case 354 =>
        val v145 = v144.asInstanceOf[SequenceNode].children.head
        val BindNode(v146, v147) = v145
        assert(v146.id == 355)
        val v148 = v144.asInstanceOf[SequenceNode].children(4)
        val BindNode(v149, v150) = v148
        assert(v149.id == 353)
        BinOp(Op.OR, matchBoolEqExpr(v147), matchBoolAndExpr(v150))(v144)
      case 451 =>
        val v151 = v144.asInstanceOf[SequenceNode].children.head
        val BindNode(v152, v153) = v151
        assert(v152.id == 355)
        matchBoolEqExpr(v153)
    }
    v154
  }

  def matchBoolEqExpr(node: Node): BoolEqExpr = {
    val BindNode(v155, v156) = node
    val v176 = v155.id match {
      case 356 =>
        val v157 = v156.asInstanceOf[SequenceNode].children(2)
        val BindNode(v158, v159) = v157
        assert(v158.id == 439)
        val BindNode(v160, v161) = v159
        val v166 = v160.id match {
          case 440 =>
            val BindNode(v162, v163) = v161
            assert(v162.id == 441)
            Op.EQ
          case 444 =>
            val BindNode(v164, v165) = v161
            assert(v164.id == 445)
            Op.NE
        }
        val v167 = v156.asInstanceOf[SequenceNode].children.head
        val BindNode(v168, v169) = v167
        assert(v168.id == 357)
        val v170 = v156.asInstanceOf[SequenceNode].children(4)
        val BindNode(v171, v172) = v170
        assert(v171.id == 355)
        BinOp(v166, matchElvisExpr(v169), matchBoolEqExpr(v172))(v156)
      case 448 =>
        val v173 = v156.asInstanceOf[SequenceNode].children.head
        val BindNode(v174, v175) = v173
        assert(v174.id == 357)
        matchElvisExpr(v175)
    }
    v176
  }

  def matchBoolOrExpr(node: Node): BoolOrExpr = {
    val BindNode(v177, v178) = node
    val v188 = v177.id match {
      case 352 =>
        val v179 = v178.asInstanceOf[SequenceNode].children.head
        val BindNode(v180, v181) = v179
        assert(v180.id == 353)
        val v182 = v178.asInstanceOf[SequenceNode].children(4)
        val BindNode(v183, v184) = v182
        assert(v183.id == 351)
        BinOp(Op.AND, matchBoolAndExpr(v181), matchBoolOrExpr(v184))(v178)
      case 454 =>
        val v185 = v178.asInstanceOf[SequenceNode].children.head
        val BindNode(v186, v187) = v185
        assert(v186.id == 353)
        matchBoolAndExpr(v187)
    }
    v188
  }

  def matchCallParams(node: Node): List[PExpr] = {
    val BindNode(v189, v190) = node
    val v218 = v189.id match {
      case 389 =>
        val v192 = v190.asInstanceOf[SequenceNode].children(2)
        val BindNode(v193, v194) = v192
        assert(v193.id == 390)
        val BindNode(v195, v196) = v194
        val v217 = v195.id match {
          case 56 =>
            None
          case 391 =>
            val BindNode(v197, v198) = v196
            val v216 = v197.id match {
              case 392 =>
                val BindNode(v199, v200) = v198
                assert(v199.id == 393)
                val v201 = v200.asInstanceOf[SequenceNode].children.head
                val BindNode(v202, v203) = v201
                assert(v202.id == 347)
                val v204 = v200.asInstanceOf[SequenceNode].children(1)
                val v205 = unrollRepeat0(v204).map { elem =>
                  val BindNode(v206, v207) = elem
                  assert(v206.id == 396)
                  val BindNode(v208, v209) = v207
                  val v215 = v208.id match {
                    case 397 =>
                      val BindNode(v210, v211) = v209
                      assert(v210.id == 398)
                      val v212 = v211.asInstanceOf[SequenceNode].children(3)
                      val BindNode(v213, v214) = v212
                      assert(v213.id == 347)
                      matchPExpr(v214)
                  }
                  v215
                }
                List(matchPExpr(v203)) ++ v205
            }
            Some(v216)
        }
        val v191 = v217
        if (v191.isDefined) v191.get else List()
    }
    v218
  }

  def matchCanonicalEnumValue(node: Node): CanonicalEnumValue = {
    val BindNode(v219, v220) = node
    val v227 = v219.id match {
      case 424 =>
        val v221 = v220.asInstanceOf[SequenceNode].children.head
        val BindNode(v222, v223) = v221
        assert(v222.id == 138)
        val v224 = v220.asInstanceOf[SequenceNode].children(2)
        val BindNode(v225, v226) = v224
        assert(v225.id == 425)
        CanonicalEnumValue(matchEnumTypeName(v223), matchEnumValueName(v226))(v220)
    }
    v227
  }

  def matchCharChar(node: Node): TerminalChar = {
    val BindNode(v228, v229) = node
    val v233 = v228.id match {
      case 410 =>
        val v230 = v229.asInstanceOf[SequenceNode].children.head
        val BindNode(v231, v232) = v230
        assert(v231.id == 247)
        matchTerminalChar(v232)
    }
    v233
  }

  def matchClassDef(node: Node): ClassDef = {
    val BindNode(v234, v235) = node
    val v257 = v234.id match {
      case 145 =>
        val v236 = v235.asInstanceOf[SequenceNode].children.head
        val BindNode(v237, v238) = v236
        assert(v237.id == 125)
        val v239 = v235.asInstanceOf[SequenceNode].children(2)
        val BindNode(v240, v241) = v239
        assert(v240.id == 146)
        AbstractClassDef(matchTypeName(v238), matchSuperTypes(v241))(v235)
      case 160 =>
        val v242 = v235.asInstanceOf[SequenceNode].children.head
        val BindNode(v243, v244) = v242
        assert(v243.id == 125)
        val v245 = v235.asInstanceOf[SequenceNode].children(2)
        val BindNode(v246, v247) = v245
        assert(v246.id == 161)
        ConcreteClassDef(matchTypeName(v244), None, matchClassParamsDef(v247))(v235)
      case 177 =>
        val v248 = v235.asInstanceOf[SequenceNode].children.head
        val BindNode(v249, v250) = v248
        assert(v249.id == 125)
        val v251 = v235.asInstanceOf[SequenceNode].children(2)
        val BindNode(v252, v253) = v251
        assert(v252.id == 146)
        val v254 = v235.asInstanceOf[SequenceNode].children(4)
        val BindNode(v255, v256) = v254
        assert(v255.id == 161)
        ConcreteClassDef(matchTypeName(v250), Some(matchSuperTypes(v253)), matchClassParamsDef(v256))(v235)
    }
    v257
  }

  def matchClassParamDef(node: Node): ClassParamDef = {
    val BindNode(v258, v259) = node
    val v277 = v258.id match {
      case 169 =>
        val v260 = v259.asInstanceOf[SequenceNode].children.head
        val BindNode(v261, v262) = v260
        assert(v261.id == 170)
        val v263 = v259.asInstanceOf[SequenceNode].children(1)
        val BindNode(v264, v265) = v263
        assert(v264.id == 116)
        val BindNode(v266, v267) = v265
        val v276 = v266.id match {
          case 56 =>
            None
          case 117 =>
            val BindNode(v268, v269) = v267
            val v275 = v268.id match {
              case 118 =>
                val BindNode(v270, v271) = v269
                assert(v270.id == 119)
                val v272 = v271.asInstanceOf[SequenceNode].children(3)
                val BindNode(v273, v274) = v272
                assert(v273.id == 121)
                matchTypeDesc(v274)
            }
            Some(v275)
        }
        ClassParamDef(matchParamName(v262), v276)(v259)
    }
    v277
  }

  def matchClassParamsDef(node: Node): List[ClassParamDef] = {
    val BindNode(v278, v279) = node
    val v307 = v278.id match {
      case 162 =>
        val v281 = v279.asInstanceOf[SequenceNode].children(2)
        val BindNode(v282, v283) = v281
        assert(v282.id == 164)
        val BindNode(v284, v285) = v283
        val v306 = v284.id match {
          case 56 =>
            None
          case 165 =>
            val BindNode(v286, v287) = v285
            val v305 = v286.id match {
              case 166 =>
                val BindNode(v288, v289) = v287
                assert(v288.id == 167)
                val v290 = v289.asInstanceOf[SequenceNode].children.head
                val BindNode(v291, v292) = v290
                assert(v291.id == 168)
                val v293 = v289.asInstanceOf[SequenceNode].children(1)
                val v294 = unrollRepeat0(v293).map { elem =>
                  val BindNode(v295, v296) = elem
                  assert(v295.id == 173)
                  val BindNode(v297, v298) = v296
                  val v304 = v297.id match {
                    case 174 =>
                      val BindNode(v299, v300) = v298
                      assert(v299.id == 175)
                      val v301 = v300.asInstanceOf[SequenceNode].children(3)
                      val BindNode(v302, v303) = v301
                      assert(v302.id == 168)
                      matchClassParamDef(v303)
                  }
                  v304
                }
                List(matchClassParamDef(v292)) ++ v294
            }
            Some(v305)
        }
        val v280 = v306
        if (v280.isDefined) v280.get else List()
    }
    v307
  }

  def matchCondSymPath(node: Node): List[CondSymDir.Value] = {
    val BindNode(v308, v309) = node
    val v321 = v308.id match {
      case 318 =>
        val v310 = v309.asInstanceOf[SequenceNode].children.head
        val v311 = unrollRepeat1(v310).map { elem =>
          val BindNode(v312, v313) = elem
          assert(v312.id == 320)
          val BindNode(v314, v315) = v313
          val v320 = v314.id match {
            case 321 =>
              val BindNode(v316, v317) = v315
              assert(v316.id == 322)
              CondSymDir.BODY
            case 323 =>
              val BindNode(v318, v319) = v315
              assert(v318.id == 324)
              CondSymDir.COND
          }
          v320
        }
        v311
    }
    v321
  }

  def matchDef(node: Node): Def = {
    val BindNode(v322, v323) = node
    val v330 = v322.id match {
      case 58 =>
        val v324 = v323.asInstanceOf[SequenceNode].children.head
        val BindNode(v325, v326) = v324
        assert(v325.id == 59)
        matchRule(v326)
      case 141 =>
        val v327 = v323.asInstanceOf[SequenceNode].children.head
        val BindNode(v328, v329) = v327
        assert(v328.id == 142)
        matchTypeDef(v329)
    }
    v330
  }

  def matchElem(node: Node): Elem = {
    val BindNode(v331, v332) = node
    val v339 = v331.id match {
      case 224 =>
        val v333 = v332.asInstanceOf[SequenceNode].children.head
        val BindNode(v334, v335) = v333
        assert(v334.id == 225)
        matchSymbol(v335)
      case 308 =>
        val v336 = v332.asInstanceOf[SequenceNode].children.head
        val BindNode(v337, v338) = v336
        assert(v337.id == 309)
        matchProcessor(v338)
    }
    v339
  }

  def matchElvisExpr(node: Node): ElvisExpr = {
    val BindNode(v340, v341) = node
    val v351 = v340.id match {
      case 358 =>
        val v342 = v341.asInstanceOf[SequenceNode].children.head
        val BindNode(v343, v344) = v342
        assert(v343.id == 359)
        val v345 = v341.asInstanceOf[SequenceNode].children(4)
        val BindNode(v346, v347) = v345
        assert(v346.id == 357)
        ElvisOp(matchAdditiveExpr(v344), matchElvisExpr(v347))(v341)
      case 438 =>
        val v348 = v341.asInstanceOf[SequenceNode].children.head
        val BindNode(v349, v350) = v348
        assert(v349.id == 359)
        matchAdditiveExpr(v350)
    }
    v351
  }

  def matchEmptySequence(node: Node): EmptySeq = {
    val BindNode(v352, v353) = node
    val v354 = v352.id match {
      case 304 =>
        EmptySeq()(v353)
    }
    v354
  }

  def matchEnumTypeDef(node: Node): EnumTypeDef = {
    val BindNode(v355, v356) = node
    val v383 = v355.id match {
      case 201 =>
        val v357 = v356.asInstanceOf[SequenceNode].children.head
        val BindNode(v358, v359) = v357
        assert(v358.id == 138)
        val v360 = v356.asInstanceOf[SequenceNode].children(4)
        val BindNode(v361, v362) = v360
        assert(v361.id == 202)
        val BindNode(v363, v364) = v362
        val v382 = v363.id match {
          case 203 =>
            val BindNode(v365, v366) = v364
            assert(v365.id == 204)
            val v367 = v366.asInstanceOf[SequenceNode].children.head
            val BindNode(v368, v369) = v367
            assert(v368.id == 70)
            val v370 = v366.asInstanceOf[SequenceNode].children(1)
            val v371 = unrollRepeat0(v370).map { elem =>
              val BindNode(v372, v373) = elem
              assert(v372.id == 207)
              val BindNode(v374, v375) = v373
              val v381 = v374.id match {
                case 208 =>
                  val BindNode(v376, v377) = v375
                  assert(v376.id == 209)
                  val v378 = v377.asInstanceOf[SequenceNode].children(3)
                  val BindNode(v379, v380) = v378
                  assert(v379.id == 70)
                  matchId(v380)
              }
              v381
            }
            List(matchId(v369)) ++ v371
        }
        EnumTypeDef(matchEnumTypeName(v359), v382)(v356)
    }
    v383
  }

  def matchEnumTypeName(node: Node): EnumTypeName = {
    val BindNode(v384, v385) = node
    val v389 = v384.id match {
      case 139 =>
        val v386 = v385.asInstanceOf[SequenceNode].children(1)
        val BindNode(v387, v388) = v386
        assert(v387.id == 70)
        EnumTypeName(matchId(v388))(v385)
    }
    v389
  }

  def matchEnumValue(node: Node): AbstractEnumValue = {
    val BindNode(v390, v391) = node
    val v410 = v390.id match {
      case 418 =>
        val v392 = v391.asInstanceOf[SequenceNode].children.head
        val BindNode(v393, v394) = v392
        assert(v393.id == 419)
        val BindNode(v395, v396) = v394
        assert(v395.id == 420)
        val BindNode(v397, v398) = v396
        val v409 = v397.id match {
          case 421 =>
            val BindNode(v399, v400) = v398
            assert(v399.id == 422)
            val v401 = v400.asInstanceOf[SequenceNode].children.head
            val BindNode(v402, v403) = v401
            assert(v402.id == 423)
            matchCanonicalEnumValue(v403)
          case 427 =>
            val BindNode(v404, v405) = v398
            assert(v404.id == 428)
            val v406 = v405.asInstanceOf[SequenceNode].children.head
            val BindNode(v407, v408) = v406
            assert(v407.id == 429)
            matchShortenedEnumValue(v408)
        }
        v409
    }
    v410
  }

  def matchEnumValueName(node: Node): EnumValueName = {
    val BindNode(v411, v412) = node
    val v416 = v411.id match {
      case 426 =>
        val v413 = v412.asInstanceOf[SequenceNode].children.head
        val BindNode(v414, v415) = v413
        assert(v414.id == 70)
        EnumValueName(matchId(v415))(v412)
    }
    v416
  }

  def matchFuncCallOrConstructExpr(node: Node): FuncCallOrConstructExpr = {
    val BindNode(v417, v418) = node
    val v425 = v417.id match {
      case 386 =>
        val v419 = v418.asInstanceOf[SequenceNode].children.head
        val BindNode(v420, v421) = v419
        assert(v420.id == 387)
        val v422 = v418.asInstanceOf[SequenceNode].children(2)
        val BindNode(v423, v424) = v422
        assert(v423.id == 388)
        FuncCallOrConstructExpr(matchTypeOrFuncName(v421), matchCallParams(v424))(v418)
    }
    v425
  }

  def matchGrammar(node: Node): Grammar = {
    val BindNode(v426, v427) = node
    val v443 = v426.id match {
      case 3 =>
        val v428 = v427.asInstanceOf[SequenceNode].children(1)
        val BindNode(v429, v430) = v428
        assert(v429.id == 57)
        val v431 = v427.asInstanceOf[SequenceNode].children(2)
        val v432 = unrollRepeat0(v431).map { elem =>
          val BindNode(v433, v434) = elem
          assert(v433.id == 472)
          val BindNode(v435, v436) = v434
          val v442 = v435.id match {
            case 473 =>
              val BindNode(v437, v438) = v436
              assert(v437.id == 474)
              val v439 = v438.asInstanceOf[SequenceNode].children(1)
              val BindNode(v440, v441) = v439
              assert(v440.id == 57)
              matchDef(v441)
          }
          v442
        }
        Grammar(List(matchDef(v430)) ++ v432)(v427)
    }
    v443
  }

  def matchId(node: Node): String = {
    val BindNode(v444, v445) = node
    val v447 = v444.id match {
      case 71 =>
        val v446 = v445.asInstanceOf[SequenceNode].children.head
        v446.sourceText
    }
    v447
  }

  def matchIdNoKeyword(node: Node): String = {
    val BindNode(v448, v449) = node
    val v451 = v448.id match {
      case 68 =>
        val v450 = v449.asInstanceOf[SequenceNode].children.head
        v450.sourceText
    }
    v451
  }

  def matchInPlaceChoices(node: Node): InPlaceChoices = {
    val BindNode(v452, v453) = node
    val v469 = v452.id match {
      case 292 =>
        val v454 = v453.asInstanceOf[SequenceNode].children.head
        val BindNode(v455, v456) = v454
        assert(v455.id == 221)
        val v457 = v453.asInstanceOf[SequenceNode].children(1)
        val v458 = unrollRepeat0(v457).map { elem =>
          val BindNode(v459, v460) = elem
          assert(v459.id == 295)
          val BindNode(v461, v462) = v460
          val v468 = v461.id match {
            case 296 =>
              val BindNode(v463, v464) = v462
              assert(v463.id == 297)
              val v465 = v464.asInstanceOf[SequenceNode].children(3)
              val BindNode(v466, v467) = v465
              assert(v466.id == 221)
              matchSequence(v467)
          }
          v468
        }
        InPlaceChoices(List(matchSequence(v456)) ++ v458)(v453)
    }
    v469
  }

  def matchLHS(node: Node): LHS = {
    val BindNode(v470, v471) = node
    val v489 = v470.id match {
      case 62 =>
        val v472 = v471.asInstanceOf[SequenceNode].children.head
        val BindNode(v473, v474) = v472
        assert(v473.id == 63)
        val v475 = v471.asInstanceOf[SequenceNode].children(1)
        val BindNode(v476, v477) = v475
        assert(v476.id == 116)
        val BindNode(v478, v479) = v477
        val v488 = v478.id match {
          case 56 =>
            None
          case 117 =>
            val BindNode(v480, v481) = v479
            val v487 = v480.id match {
              case 118 =>
                val BindNode(v482, v483) = v481
                assert(v482.id == 119)
                val v484 = v483.asInstanceOf[SequenceNode].children(3)
                val BindNode(v485, v486) = v484
                assert(v485.id == 121)
                matchTypeDesc(v486)
            }
            Some(v487)
        }
        LHS(matchNonterminal(v474), v488)(v471)
    }
    v489
  }

  def matchLiteral(node: Node): Literal = {
    val BindNode(v490, v491) = node
    val v509 = v490.id match {
      case 111 =>
        NullLiteral()(v491)
      case 404 =>
        val v492 = v491.asInstanceOf[SequenceNode].children.head
        val BindNode(v493, v494) = v492
        assert(v493.id == 405)
        val BindNode(v495, v496) = v494
        val v501 = v495.id match {
          case 406 =>
            val BindNode(v497, v498) = v496
            assert(v497.id == 103)
            true
          case 407 =>
            val BindNode(v499, v500) = v496
            assert(v499.id == 107)
            false
        }
        BoolLiteral(v501)(v491)
      case 408 =>
        val v502 = v491.asInstanceOf[SequenceNode].children(1)
        val BindNode(v503, v504) = v502
        assert(v503.id == 409)
        CharLiteral(matchCharChar(v504))(v491)
      case 411 =>
        val v505 = v491.asInstanceOf[SequenceNode].children(1)
        val v506 = unrollRepeat0(v505).map { elem =>
          val BindNode(v507, v508) = elem
          assert(v507.id == 414)
          matchStrChar(v508)
        }
        StrLiteral(v506)(v491)
    }
    v509
  }

  def matchLongest(node: Node): Longest = {
    val BindNode(v510, v511) = node
    val v515 = v510.id match {
      case 301 =>
        val v512 = v511.asInstanceOf[SequenceNode].children(2)
        val BindNode(v513, v514) = v512
        assert(v513.id == 291)
        Longest(matchInPlaceChoices(v514))(v511)
    }
    v515
  }

  def matchNamedConstructExpr(node: Node): NamedConstructExpr = {
    val BindNode(v516, v517) = node
    val v538 = v516.id match {
      case 371 =>
        val v518 = v517.asInstanceOf[SequenceNode].children.head
        val BindNode(v519, v520) = v518
        assert(v519.id == 125)
        val v521 = v517.asInstanceOf[SequenceNode].children(3)
        val BindNode(v522, v523) = v521
        assert(v522.id == 372)
        val v524 = v517.asInstanceOf[SequenceNode].children(1)
        val BindNode(v525, v526) = v524
        assert(v525.id == 181)
        val BindNode(v527, v528) = v526
        val v537 = v527.id match {
          case 56 =>
            None
          case 182 =>
            val BindNode(v529, v530) = v528
            val v536 = v529.id match {
              case 183 =>
                val BindNode(v531, v532) = v530
                assert(v531.id == 184)
                val v533 = v532.asInstanceOf[SequenceNode].children(1)
                val BindNode(v534, v535) = v533
                assert(v534.id == 146)
                matchSuperTypes(v535)
            }
            Some(v536)
        }
        NamedConstructExpr(matchTypeName(v520), matchNamedConstructParams(v523), v537)(v517)
    }
    v538
  }

  def matchNamedConstructParams(node: Node): List[NamedParam] = {
    val BindNode(v539, v540) = node
    val v564 = v539.id match {
      case 373 =>
        val v541 = v540.asInstanceOf[SequenceNode].children(2)
        val BindNode(v542, v543) = v541
        assert(v542.id == 374)
        val BindNode(v544, v545) = v543
        val v563 = v544.id match {
          case 375 =>
            val BindNode(v546, v547) = v545
            assert(v546.id == 376)
            val v548 = v547.asInstanceOf[SequenceNode].children.head
            val BindNode(v549, v550) = v548
            assert(v549.id == 377)
            val v551 = v547.asInstanceOf[SequenceNode].children(1)
            val v552 = unrollRepeat0(v551).map { elem =>
              val BindNode(v553, v554) = elem
              assert(v553.id == 381)
              val BindNode(v555, v556) = v554
              val v562 = v555.id match {
                case 382 =>
                  val BindNode(v557, v558) = v556
                  assert(v557.id == 383)
                  val v559 = v558.asInstanceOf[SequenceNode].children(3)
                  val BindNode(v560, v561) = v559
                  assert(v560.id == 377)
                  matchNamedParam(v561)
              }
              v562
            }
            List(matchNamedParam(v550)) ++ v552
        }
        v563
    }
    v564
  }

  def matchNamedParam(node: Node): NamedParam = {
    val BindNode(v565, v566) = node
    val v587 = v565.id match {
      case 378 =>
        val v567 = v566.asInstanceOf[SequenceNode].children.head
        val BindNode(v568, v569) = v567
        assert(v568.id == 170)
        val v570 = v566.asInstanceOf[SequenceNode].children(1)
        val BindNode(v571, v572) = v570
        assert(v571.id == 116)
        val BindNode(v573, v574) = v572
        val v583 = v573.id match {
          case 56 =>
            None
          case 117 =>
            val BindNode(v575, v576) = v574
            val v582 = v575.id match {
              case 118 =>
                val BindNode(v577, v578) = v576
                assert(v577.id == 119)
                val v579 = v578.asInstanceOf[SequenceNode].children(3)
                val BindNode(v580, v581) = v579
                assert(v580.id == 121)
                matchTypeDesc(v581)
            }
            Some(v582)
        }
        val v584 = v566.asInstanceOf[SequenceNode].children(5)
        val BindNode(v585, v586) = v584
        assert(v585.id == 347)
        NamedParam(matchParamName(v569), v583, matchPExpr(v586))(v566)
    }
    v587
  }

  def matchNonNullTypeDesc(node: Node): NonNullTypeDesc = {
    val BindNode(v588, v589) = node
    val v608 = v588.id match {
      case 126 =>
        val v590 = v589.asInstanceOf[SequenceNode].children(2)
        val BindNode(v591, v592) = v590
        assert(v591.id == 121)
        ArrayTypeDesc(matchTypeDesc(v592))(v589)
      case 137 =>
        val v593 = v589.asInstanceOf[SequenceNode].children.head
        val BindNode(v594, v595) = v593
        assert(v594.id == 138)
        matchEnumTypeName(v595)
      case 141 =>
        val v596 = v589.asInstanceOf[SequenceNode].children.head
        val BindNode(v597, v598) = v596
        assert(v597.id == 142)
        matchTypeDef(v598)
      case 124 =>
        val v599 = v589.asInstanceOf[SequenceNode].children.head
        val BindNode(v600, v601) = v599
        assert(v600.id == 125)
        matchTypeName(v601)
      case 131 =>
        val v602 = v589.asInstanceOf[SequenceNode].children.head
        val BindNode(v603, v604) = v602
        assert(v603.id == 132)
        matchAnyType(v604)
      case 129 =>
        val v605 = v589.asInstanceOf[SequenceNode].children.head
        val BindNode(v606, v607) = v605
        assert(v606.id == 130)
        matchValueType(v607)
    }
    v608
  }

  def matchNonterminal(node: Node): Nonterminal = {
    val BindNode(v609, v610) = node
    val v614 = v609.id match {
      case 64 =>
        val v611 = v610.asInstanceOf[SequenceNode].children.head
        val BindNode(v612, v613) = v611
        assert(v612.id == 65)
        Nonterminal(matchNonterminalName(v613))(v610)
    }
    v614
  }

  def matchNonterminalName(node: Node): NonterminalName = {
    val BindNode(v615, v616) = node
    val v623 = v615.id match {
      case 66 =>
        val v617 = v616.asInstanceOf[SequenceNode].children.head
        val BindNode(v618, v619) = v617
        assert(v618.id == 67)
        NonterminalName(matchIdNoKeyword(v619))(v616)
      case 114 =>
        val v620 = v616.asInstanceOf[SequenceNode].children(1)
        val BindNode(v621, v622) = v620
        assert(v621.id == 70)
        NonterminalName(matchId(v622))(v616)
    }
    v623
  }

  def matchPExpr(node: Node): PExpr = {
    val BindNode(v624, v625) = node
    val v635 = v624.id match {
      case 348 =>
        val v626 = v625.asInstanceOf[SequenceNode].children.head
        val BindNode(v627, v628) = v626
        assert(v627.id == 349)
        val v629 = v625.asInstanceOf[SequenceNode].children(4)
        val BindNode(v630, v631) = v629
        assert(v630.id == 121)
        TypedPExpr(matchTernaryExpr(v628), matchTypeDesc(v631))(v625)
      case 458 =>
        val v632 = v625.asInstanceOf[SequenceNode].children.head
        val BindNode(v633, v634) = v632
        assert(v633.id == 349)
        matchTernaryExpr(v634)
    }
    v635
  }

  def matchPExprBlock(node: Node): ProcessorBlock = {
    val BindNode(v636, v637) = node
    val v641 = v636.id match {
      case 346 =>
        val v638 = v637.asInstanceOf[SequenceNode].children(2)
        val BindNode(v639, v640) = v638
        assert(v639.id == 347)
        ProcessorBlock(matchPExpr(v640))(v637)
    }
    v641
  }

  def matchParamName(node: Node): ParamName = {
    val BindNode(v642, v643) = node
    val v650 = v642.id match {
      case 66 =>
        val v644 = v643.asInstanceOf[SequenceNode].children.head
        val BindNode(v645, v646) = v644
        assert(v645.id == 67)
        ParamName(matchIdNoKeyword(v646))(v643)
      case 114 =>
        val v647 = v643.asInstanceOf[SequenceNode].children(1)
        val BindNode(v648, v649) = v647
        assert(v648.id == 70)
        ParamName(matchId(v649))(v643)
    }
    v650
  }

  def matchPostUnSymbol(node: Node): PostUnSymbol = {
    val BindNode(v651, v652) = node
    val v665 = v651.id match {
      case 237 =>
        val v653 = v652.asInstanceOf[SequenceNode].children.head
        val BindNode(v654, v655) = v653
        assert(v654.id == 236)
        Optional(matchPostUnSymbol(v655))(v652)
      case 238 =>
        val v656 = v652.asInstanceOf[SequenceNode].children.head
        val BindNode(v657, v658) = v656
        assert(v657.id == 236)
        RepeatFromZero(matchPostUnSymbol(v658))(v652)
      case 239 =>
        val v659 = v652.asInstanceOf[SequenceNode].children.head
        val BindNode(v660, v661) = v659
        assert(v660.id == 236)
        RepeatFromOne(matchPostUnSymbol(v661))(v652)
      case 241 =>
        val v662 = v652.asInstanceOf[SequenceNode].children.head
        val BindNode(v663, v664) = v662
        assert(v663.id == 242)
        matchAtomSymbol(v664)
    }
    v665
  }

  def matchPreUnSymbol(node: Node): PreUnSymbol = {
    val BindNode(v666, v667) = node
    val v677 = v666.id match {
      case 231 =>
        val v668 = v667.asInstanceOf[SequenceNode].children(2)
        val BindNode(v669, v670) = v668
        assert(v669.id == 230)
        FollowedBy(matchPreUnSymbol(v670))(v667)
      case 233 =>
        val v671 = v667.asInstanceOf[SequenceNode].children(2)
        val BindNode(v672, v673) = v671
        assert(v672.id == 230)
        NotFollowedBy(matchPreUnSymbol(v673))(v667)
      case 235 =>
        val v674 = v667.asInstanceOf[SequenceNode].children.head
        val BindNode(v675, v676) = v674
        assert(v675.id == 236)
        matchPostUnSymbol(v676)
    }
    v677
  }

  def matchPrefixNotExpr(node: Node): PrefixNotExpr = {
    val BindNode(v678, v679) = node
    val v686 = v678.id match {
      case 362 =>
        val v680 = v679.asInstanceOf[SequenceNode].children(2)
        val BindNode(v681, v682) = v680
        assert(v681.id == 361)
        PrefixOp(PreOp.NOT, matchPrefixNotExpr(v682))(v679)
      case 363 =>
        val v683 = v679.asInstanceOf[SequenceNode].children.head
        val BindNode(v684, v685) = v683
        assert(v684.id == 364)
        matchAtom(v685)
    }
    v686
  }

  def matchProcessor(node: Node): Processor = {
    val BindNode(v687, v688) = node
    val v695 = v687.id match {
      case 310 =>
        val v689 = v688.asInstanceOf[SequenceNode].children.head
        val BindNode(v690, v691) = v689
        assert(v690.id == 311)
        matchRef(v691)
      case 344 =>
        val v692 = v688.asInstanceOf[SequenceNode].children.head
        val BindNode(v693, v694) = v692
        assert(v693.id == 345)
        matchPExprBlock(v694)
    }
    v695
  }

  def matchRHS(node: Node): Sequence = {
    val BindNode(v696, v697) = node
    val v701 = v696.id match {
      case 220 =>
        val v698 = v697.asInstanceOf[SequenceNode].children.head
        val BindNode(v699, v700) = v698
        assert(v699.id == 221)
        matchSequence(v700)
    }
    v701
  }

  def matchRawRef(node: Node): RawRef = {
    val BindNode(v702, v703) = node
    val v713 = v702.id match {
      case 341 =>
        val v704 = v703.asInstanceOf[SequenceNode].children(2)
        val BindNode(v705, v706) = v704
        assert(v705.id == 326)
        val v707 = v703.asInstanceOf[SequenceNode].children(1)
        val BindNode(v708, v709) = v707
        assert(v708.id == 316)
        val BindNode(v710, v711) = v709
        val v712 = v710.id match {
          case 56 =>
            None
          case 317 =>
            Some(matchCondSymPath(v711))
        }
        RawRef(matchRefIdx(v706), v712)(v703)
    }
    v713
  }

  def matchRef(node: Node): Ref = {
    val BindNode(v714, v715) = node
    val v722 = v714.id match {
      case 312 =>
        val v716 = v715.asInstanceOf[SequenceNode].children.head
        val BindNode(v717, v718) = v716
        assert(v717.id == 313)
        matchValRef(v718)
      case 339 =>
        val v719 = v715.asInstanceOf[SequenceNode].children.head
        val BindNode(v720, v721) = v719
        assert(v720.id == 340)
        matchRawRef(v721)
    }
    v722
  }

  def matchRefIdx(node: Node): String = {
    val BindNode(v723, v724) = node
    val v726 = v723.id match {
      case 327 =>
        val v725 = v724.asInstanceOf[SequenceNode].children.head
        v725.sourceText
    }
    v726
  }

  def matchRule(node: Node): Rule = {
    val BindNode(v727, v728) = node
    val v755 = v727.id match {
      case 60 =>
        val v729 = v728.asInstanceOf[SequenceNode].children.head
        val BindNode(v730, v731) = v729
        assert(v730.id == 61)
        val v732 = v728.asInstanceOf[SequenceNode].children(4)
        val BindNode(v733, v734) = v732
        assert(v733.id == 216)
        val BindNode(v735, v736) = v734
        val v754 = v735.id match {
          case 217 =>
            val BindNode(v737, v738) = v736
            assert(v737.id == 218)
            val v739 = v738.asInstanceOf[SequenceNode].children.head
            val BindNode(v740, v741) = v739
            assert(v740.id == 219)
            val v742 = v738.asInstanceOf[SequenceNode].children(1)
            val v743 = unrollRepeat0(v742).map { elem =>
              val BindNode(v744, v745) = elem
              assert(v744.id == 467)
              val BindNode(v746, v747) = v745
              val v753 = v746.id match {
                case 468 =>
                  val BindNode(v748, v749) = v747
                  assert(v748.id == 469)
                  val v750 = v749.asInstanceOf[SequenceNode].children(3)
                  val BindNode(v751, v752) = v750
                  assert(v751.id == 219)
                  matchRHS(v752)
              }
              v753
            }
            List(matchRHS(v741)) ++ v743
        }
        Rule(matchLHS(v731), v754)(v728)
    }
    v755
  }

  def matchSequence(node: Node): Sequence = {
    val BindNode(v756, v757) = node
    val v773 = v756.id match {
      case 222 =>
        val v758 = v757.asInstanceOf[SequenceNode].children.head
        val BindNode(v759, v760) = v758
        assert(v759.id == 223)
        val v761 = v757.asInstanceOf[SequenceNode].children(1)
        val v762 = unrollRepeat0(v761).map { elem =>
          val BindNode(v763, v764) = elem
          assert(v763.id == 462)
          val BindNode(v765, v766) = v764
          val v772 = v765.id match {
            case 463 =>
              val BindNode(v767, v768) = v766
              assert(v767.id == 464)
              val v769 = v768.asInstanceOf[SequenceNode].children(1)
              val BindNode(v770, v771) = v769
              assert(v770.id == 223)
              matchElem(v771)
          }
          v772
        }
        Sequence(List(matchElem(v760)) ++ v762)(v757)
    }
    v773
  }

  def matchShortenedEnumValue(node: Node): ShortenedEnumValue = {
    val BindNode(v774, v775) = node
    val v779 = v774.id match {
      case 430 =>
        val v776 = v775.asInstanceOf[SequenceNode].children(1)
        val BindNode(v777, v778) = v776
        assert(v777.id == 425)
        ShortenedEnumValue(matchEnumValueName(v778))(v775)
    }
    v779
  }

  def matchStrChar(node: Node): StringChar = {
    val BindNode(v780, v781) = node
    val v785 = v780.id match {
      case 415 =>
        val v782 = v781.asInstanceOf[SequenceNode].children.head
        val BindNode(v783, v784) = v782
        assert(v783.id == 283)
        matchStringChar(v784)
    }
    v785
  }

  def matchStringChar(node: Node): StringChar = {
    val BindNode(v786, v787) = node
    val v799 = v786.id match {
      case 284 =>
        val v788 = v787.asInstanceOf[SequenceNode].children.head
        val BindNode(v789, v790) = v788
        assert(v789.id == 285)
        val BindNode(v791, v792) = v790
        assert(v791.id == 28)
        CharAsIs(v792.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v787)
      case 287 =>
        val v793 = v787.asInstanceOf[SequenceNode].children(1)
        val BindNode(v794, v795) = v793
        assert(v794.id == 288)
        CharEscaped(v795.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v787)
      case 253 =>
        val v796 = v787.asInstanceOf[SequenceNode].children.head
        val BindNode(v797, v798) = v796
        assert(v797.id == 254)
        matchUnicodeChar(v798)
    }
    v799
  }

  def matchStringSymbol(node: Node): StringSymbol = {
    val BindNode(v800, v801) = node
    val v806 = v800.id match {
      case 279 =>
        val v802 = v801.asInstanceOf[SequenceNode].children(1)
        val v803 = unrollRepeat0(v802).map { elem =>
          val BindNode(v804, v805) = elem
          assert(v804.id == 283)
          matchStringChar(v805)
        }
        StringSymbol(v803)(v801)
    }
    v806
  }

  def matchSubType(node: Node): SubType = {
    val BindNode(v807, v808) = node
    val v818 = v807.id match {
      case 124 =>
        val v809 = v808.asInstanceOf[SequenceNode].children.head
        val BindNode(v810, v811) = v809
        assert(v810.id == 125)
        matchTypeName(v811)
      case 143 =>
        val v812 = v808.asInstanceOf[SequenceNode].children.head
        val BindNode(v813, v814) = v812
        assert(v813.id == 144)
        matchClassDef(v814)
      case 178 =>
        val v815 = v808.asInstanceOf[SequenceNode].children.head
        val BindNode(v816, v817) = v815
        assert(v816.id == 179)
        matchSuperDef(v817)
    }
    v818
  }

  def matchSubTypes(node: Node): List[SubType] = {
    val BindNode(v819, v820) = node
    val v836 = v819.id match {
      case 191 =>
        val v821 = v820.asInstanceOf[SequenceNode].children.head
        val BindNode(v822, v823) = v821
        assert(v822.id == 192)
        val v824 = v820.asInstanceOf[SequenceNode].children(1)
        val v825 = unrollRepeat0(v824).map { elem =>
          val BindNode(v826, v827) = elem
          assert(v826.id == 195)
          val BindNode(v828, v829) = v827
          val v835 = v828.id match {
            case 196 =>
              val BindNode(v830, v831) = v829
              assert(v830.id == 197)
              val v832 = v831.asInstanceOf[SequenceNode].children(3)
              val BindNode(v833, v834) = v832
              assert(v833.id == 192)
              matchSubType(v834)
          }
          v835
        }
        List(matchSubType(v823)) ++ v825
    }
    v836
  }

  def matchSuperDef(node: Node): SuperDef = {
    val BindNode(v837, v838) = node
    val v870 = v837.id match {
      case 180 =>
        val v839 = v838.asInstanceOf[SequenceNode].children.head
        val BindNode(v840, v841) = v839
        assert(v840.id == 125)
        val v842 = v838.asInstanceOf[SequenceNode].children(4)
        val BindNode(v843, v844) = v842
        assert(v843.id == 186)
        val BindNode(v845, v846) = v844
        val v855 = v845.id match {
          case 56 =>
            None
          case 187 =>
            val BindNode(v847, v848) = v846
            val v854 = v847.id match {
              case 188 =>
                val BindNode(v849, v850) = v848
                assert(v849.id == 189)
                val v851 = v850.asInstanceOf[SequenceNode].children(1)
                val BindNode(v852, v853) = v851
                assert(v852.id == 190)
                matchSubTypes(v853)
            }
            Some(v854)
        }
        val v856 = v838.asInstanceOf[SequenceNode].children(1)
        val BindNode(v857, v858) = v856
        assert(v857.id == 181)
        val BindNode(v859, v860) = v858
        val v869 = v859.id match {
          case 56 =>
            None
          case 182 =>
            val BindNode(v861, v862) = v860
            val v868 = v861.id match {
              case 183 =>
                val BindNode(v863, v864) = v862
                assert(v863.id == 184)
                val v865 = v864.asInstanceOf[SequenceNode].children(1)
                val BindNode(v866, v867) = v865
                assert(v866.id == 146)
                matchSuperTypes(v867)
            }
            Some(v868)
        }
        SuperDef(matchTypeName(v841), v855, v869)(v838)
    }
    v870
  }

  def matchSuperTypes(node: Node): List[TypeName] = {
    val BindNode(v871, v872) = node
    val v900 = v871.id match {
      case 147 =>
        val v874 = v872.asInstanceOf[SequenceNode].children(2)
        val BindNode(v875, v876) = v874
        assert(v875.id == 149)
        val BindNode(v877, v878) = v876
        val v899 = v877.id match {
          case 56 =>
            None
          case 150 =>
            val BindNode(v879, v880) = v878
            val v898 = v879.id match {
              case 151 =>
                val BindNode(v881, v882) = v880
                assert(v881.id == 152)
                val v883 = v882.asInstanceOf[SequenceNode].children.head
                val BindNode(v884, v885) = v883
                assert(v884.id == 125)
                val v886 = v882.asInstanceOf[SequenceNode].children(1)
                val v887 = unrollRepeat0(v886).map { elem =>
                  val BindNode(v888, v889) = elem
                  assert(v888.id == 155)
                  val BindNode(v890, v891) = v889
                  val v897 = v890.id match {
                    case 156 =>
                      val BindNode(v892, v893) = v891
                      assert(v892.id == 157)
                      val v894 = v893.asInstanceOf[SequenceNode].children(3)
                      val BindNode(v895, v896) = v894
                      assert(v895.id == 125)
                      matchTypeName(v896)
                  }
                  v897
                }
                List(matchTypeName(v885)) ++ v887
            }
            Some(v898)
        }
        val v873 = v899
        if (v873.isDefined) v873.get else List()
    }
    v900
  }

  def matchSymbol(node: Node): Symbol = {
    val BindNode(v901, v902) = node
    val v906 = v901.id match {
      case 226 =>
        val v903 = v902.asInstanceOf[SequenceNode].children.head
        val BindNode(v904, v905) = v903
        assert(v904.id == 227)
        matchBinSymbol(v905)
    }
    v906
  }

  def matchTerminal(node: Node): Terminal = {
    val BindNode(v907, v908) = node
    val v912 = v907.id match {
      case 245 =>
        val v909 = v908.asInstanceOf[SequenceNode].children(1)
        val BindNode(v910, v911) = v909
        assert(v910.id == 247)
        matchTerminalChar(v911)
      case 257 =>
        AnyTerminal()(v908)
    }
    v912
  }

  def matchTerminalChar(node: Node): TerminalChar = {
    val BindNode(v913, v914) = node
    val v926 = v913.id match {
      case 248 =>
        val v915 = v914.asInstanceOf[SequenceNode].children.head
        val BindNode(v916, v917) = v915
        assert(v916.id == 249)
        val BindNode(v918, v919) = v917
        assert(v918.id == 28)
        CharAsIs(v919.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v914)
      case 251 =>
        val v920 = v914.asInstanceOf[SequenceNode].children(1)
        val BindNode(v921, v922) = v920
        assert(v921.id == 252)
        CharEscaped(v922.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v914)
      case 253 =>
        val v923 = v914.asInstanceOf[SequenceNode].children.head
        val BindNode(v924, v925) = v923
        assert(v924.id == 254)
        matchUnicodeChar(v925)
    }
    v926
  }

  def matchTerminalChoice(node: Node): TerminalChoice = {
    val BindNode(v927, v928) = node
    val v939 = v927.id match {
      case 261 =>
        val v929 = v928.asInstanceOf[SequenceNode].children(1)
        val BindNode(v930, v931) = v929
        assert(v930.id == 262)
        val v932 = v928.asInstanceOf[SequenceNode].children(2)
        val v933 = unrollRepeat1(v932).map { elem =>
          val BindNode(v934, v935) = elem
          assert(v934.id == 262)
          matchTerminalChoiceElem(v935)
        }
        TerminalChoice(List(matchTerminalChoiceElem(v931)) ++ v933)(v928)
      case 276 =>
        val v936 = v928.asInstanceOf[SequenceNode].children(1)
        val BindNode(v937, v938) = v936
        assert(v937.id == 271)
        TerminalChoice(List(matchTerminalChoiceRange(v938)))(v928)
    }
    v939
  }

  def matchTerminalChoiceChar(node: Node): TerminalChoiceChar = {
    val BindNode(v940, v941) = node
    val v953 = v940.id match {
      case 265 =>
        val v942 = v941.asInstanceOf[SequenceNode].children.head
        val BindNode(v943, v944) = v942
        assert(v943.id == 266)
        val BindNode(v945, v946) = v944
        assert(v945.id == 28)
        CharAsIs(v946.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v941)
      case 268 =>
        val v947 = v941.asInstanceOf[SequenceNode].children(1)
        val BindNode(v948, v949) = v947
        assert(v948.id == 269)
        CharEscaped(v949.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char)(v941)
      case 253 =>
        val v950 = v941.asInstanceOf[SequenceNode].children.head
        val BindNode(v951, v952) = v950
        assert(v951.id == 254)
        matchUnicodeChar(v952)
    }
    v953
  }

  def matchTerminalChoiceElem(node: Node): TerminalChoiceElem = {
    val BindNode(v954, v955) = node
    val v962 = v954.id match {
      case 263 =>
        val v956 = v955.asInstanceOf[SequenceNode].children.head
        val BindNode(v957, v958) = v956
        assert(v957.id == 264)
        matchTerminalChoiceChar(v958)
      case 270 =>
        val v959 = v955.asInstanceOf[SequenceNode].children.head
        val BindNode(v960, v961) = v959
        assert(v960.id == 271)
        matchTerminalChoiceRange(v961)
    }
    v962
  }

  def matchTerminalChoiceRange(node: Node): TerminalChoiceRange = {
    val BindNode(v963, v964) = node
    val v971 = v963.id match {
      case 272 =>
        val v965 = v964.asInstanceOf[SequenceNode].children.head
        val BindNode(v966, v967) = v965
        assert(v966.id == 264)
        val v968 = v964.asInstanceOf[SequenceNode].children(2)
        val BindNode(v969, v970) = v968
        assert(v969.id == 264)
        TerminalChoiceRange(matchTerminalChoiceChar(v967), matchTerminalChoiceChar(v970))(v964)
    }
    v971
  }

  def matchTernaryExpr(node: Node): TernaryExpr = {
    val BindNode(v972, v973) = node
    val v1006 = v972.id match {
      case 350 =>
        val v974 = v973.asInstanceOf[SequenceNode].children.head
        val BindNode(v975, v976) = v974
        assert(v975.id == 351)
        val v977 = v973.asInstanceOf[SequenceNode].children(4)
        val BindNode(v978, v979) = v977
        assert(v978.id == 455)
        val BindNode(v980, v981) = v979
        assert(v980.id == 456)
        val BindNode(v982, v983) = v981
        val v989 = v982.id match {
          case 457 =>
            val BindNode(v984, v985) = v983
            assert(v984.id == 458)
            val v986 = v985.asInstanceOf[SequenceNode].children.head
            val BindNode(v987, v988) = v986
            assert(v987.id == 349)
            matchTernaryExpr(v988)
        }
        val v990 = v973.asInstanceOf[SequenceNode].children(8)
        val BindNode(v991, v992) = v990
        assert(v991.id == 455)
        val BindNode(v993, v994) = v992
        assert(v993.id == 456)
        val BindNode(v995, v996) = v994
        val v1002 = v995.id match {
          case 457 =>
            val BindNode(v997, v998) = v996
            assert(v997.id == 458)
            val v999 = v998.asInstanceOf[SequenceNode].children.head
            val BindNode(v1000, v1001) = v999
            assert(v1000.id == 349)
            matchTernaryExpr(v1001)
        }
        TernaryOp(matchBoolOrExpr(v976), v989, v1002)(v973)
      case 459 =>
        val v1003 = v973.asInstanceOf[SequenceNode].children.head
        val BindNode(v1004, v1005) = v1003
        assert(v1004.id == 351)
        matchBoolOrExpr(v1005)
    }
    v1006
  }

  def matchTypeDef(node: Node): TypeDef = {
    val BindNode(v1007, v1008) = node
    val v1018 = v1007.id match {
      case 143 =>
        val v1009 = v1008.asInstanceOf[SequenceNode].children.head
        val BindNode(v1010, v1011) = v1009
        assert(v1010.id == 144)
        matchClassDef(v1011)
      case 178 =>
        val v1012 = v1008.asInstanceOf[SequenceNode].children.head
        val BindNode(v1013, v1014) = v1012
        assert(v1013.id == 179)
        matchSuperDef(v1014)
      case 199 =>
        val v1015 = v1008.asInstanceOf[SequenceNode].children.head
        val BindNode(v1016, v1017) = v1015
        assert(v1016.id == 200)
        matchEnumTypeDef(v1017)
    }
    v1018
  }

  def matchTypeDesc(node: Node): TypeDesc = {
    val BindNode(v1019, v1020) = node
    val v1038 = v1019.id match {
      case 122 =>
        val v1021 = v1020.asInstanceOf[SequenceNode].children.head
        val BindNode(v1022, v1023) = v1021
        assert(v1022.id == 123)
        val v1024 = v1020.asInstanceOf[SequenceNode].children(1)
        val BindNode(v1025, v1026) = v1024
        assert(v1025.id == 210)
        val BindNode(v1027, v1028) = v1026
        val v1037 = v1027.id match {
          case 56 =>
            None
          case 211 =>
            val BindNode(v1029, v1030) = v1028
            val v1036 = v1029.id match {
              case 212 =>
                val BindNode(v1031, v1032) = v1030
                assert(v1031.id == 213)
                val v1033 = v1032.asInstanceOf[SequenceNode].children(1)
                val BindNode(v1034, v1035) = v1033
                assert(v1034.id == 214)
                v1035.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char
            }
            Some(v1036)
        }
        TypeDesc(matchNonNullTypeDesc(v1023), v1037.isDefined)(v1020)
    }
    v1038
  }

  def matchTypeName(node: Node): TypeName = {
    val BindNode(v1039, v1040) = node
    val v1047 = v1039.id match {
      case 66 =>
        val v1041 = v1040.asInstanceOf[SequenceNode].children.head
        val BindNode(v1042, v1043) = v1041
        assert(v1042.id == 67)
        TypeName(matchIdNoKeyword(v1043))(v1040)
      case 114 =>
        val v1044 = v1040.asInstanceOf[SequenceNode].children(1)
        val BindNode(v1045, v1046) = v1044
        assert(v1045.id == 70)
        TypeName(matchId(v1046))(v1040)
    }
    v1047
  }

  def matchTypeOrFuncName(node: Node): TypeOrFuncName = {
    val BindNode(v1048, v1049) = node
    val v1056 = v1048.id match {
      case 66 =>
        val v1050 = v1049.asInstanceOf[SequenceNode].children.head
        val BindNode(v1051, v1052) = v1050
        assert(v1051.id == 67)
        TypeOrFuncName(matchIdNoKeyword(v1052))(v1049)
      case 114 =>
        val v1053 = v1049.asInstanceOf[SequenceNode].children(1)
        val BindNode(v1054, v1055) = v1053
        assert(v1054.id == 70)
        TypeOrFuncName(matchId(v1055))(v1049)
    }
    v1056
  }

  def matchUnicodeChar(node: Node): CharUnicode = {
    val BindNode(v1057, v1058) = node
    val v1071 = v1057.id match {
      case 255 =>
        val v1059 = v1058.asInstanceOf[SequenceNode].children(2)
        val BindNode(v1060, v1061) = v1059
        assert(v1060.id == 256)
        val v1062 = v1058.asInstanceOf[SequenceNode].children(3)
        val BindNode(v1063, v1064) = v1062
        assert(v1063.id == 256)
        val v1065 = v1058.asInstanceOf[SequenceNode].children(4)
        val BindNode(v1066, v1067) = v1065
        assert(v1066.id == 256)
        val v1068 = v1058.asInstanceOf[SequenceNode].children(5)
        val BindNode(v1069, v1070) = v1068
        assert(v1069.id == 256)
        CharUnicode(List(v1061.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char, v1064.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char, v1067.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char, v1070.asInstanceOf[TerminalNode].input.asInstanceOf[Inputs.Character].char))(v1058)
    }
    v1071
  }

  def matchValRef(node: Node): ValRef = {
    val BindNode(v1072, v1073) = node
    val v1083 = v1072.id match {
      case 314 =>
        val v1074 = v1073.asInstanceOf[SequenceNode].children(2)
        val BindNode(v1075, v1076) = v1074
        assert(v1075.id == 326)
        val v1077 = v1073.asInstanceOf[SequenceNode].children(1)
        val BindNode(v1078, v1079) = v1077
        assert(v1078.id == 316)
        val BindNode(v1080, v1081) = v1079
        val v1082 = v1080.id match {
          case 56 =>
            None
          case 317 =>
            Some(matchCondSymPath(v1081))
        }
        ValRef(matchRefIdx(v1076), v1082)(v1073)
    }
    v1083
  }

  def matchValueType(node: Node): ValueType = {
    val BindNode(v1084, v1085) = node
    val v1086 = v1084.id match {
      case 81 =>
        BooleanType()(v1085)
      case 90 =>
        CharType()(v1085)
      case 96 =>
        StringType()(v1085)
    }
    v1086
  }

  def matchStart(node: Node): Grammar = {
    val BindNode(start, BindNode(_, body)) = node
    assert(start.id == 1)
    matchGrammar(body)
  }

  val naiveParser = new NaiveParser(ngrammar)

  def parse(text: String): Either[Parser.NaiveContext, ParsingErrors.ParsingError] =
    naiveParser.parse(text)

  def parseAst(text: String): Either[Grammar, ParsingErrors.ParsingError] =
    ParseTreeUtil.parseAst(naiveParser, text, matchStart)

  def main(args: Array[String]): Unit = {
    println(parseAst("A = B C \'d\' \'e\'*"))
  }
}
