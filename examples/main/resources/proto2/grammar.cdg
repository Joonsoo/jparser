proto2 = WS syntax (WS (import | package | option | topLevelDef | emptyStatement))* WS {Proto3(defs:[ProtoDefElem]=$2)}
topLevelDef: TopLevelDef = message | enum | extend | service

syntax = "syntax"&Tk WS '=' WS ("\"proto2\"" | "'proto2'") WS ';'
import = "import"&Tk (WS "weak"&Tk {%WEAK} | WS "public"&Tk {%PUBLIC})? WS strLit WS ';' {Import(importType: %ImportType?=$1, target=$3)}
package = "package"&Tk WS fullIdent WS ';' {Package(name=$2)}

option = "option"&Tk WS optionName WS '=' WS constant WS ';' {OptionDef(name=$2, value=$6)}
optionName = (ident | '(' WS fullIdent WS ')' $2) (WS '.' ident)* {OptionName(scope: OptionScope=$0, name=$1)}

label: %Label = ("required" {%REQUIRED} | "optional" {%OPTIONAL} | "repeated" {%REPEATED})&Tk
type: Type = builtinType {BuiltinType(typ=$0)} | messageType-builtinType {MessageOrEnumType(name=$0)}
builtinType: %BuiltinTypeEnum = ("double" {%DOUBLE} | "float" {%FLOAT} | "int32" {%INT32} | "int64" {%INT64}
  | "uint32" {%UINT32} | "uint64" {%UINT64} | "sint32" {%SINT32} | "sint64" {%SINT64}
  | "fixed32" {%FIXED32} | "fixed64" {%FIXED64} | "sfixed32" {%SFIXED32} | "sfixed64" {%SFIXED64}
  | "bool" {%BOOL} | "string" {%STRING} | "bytes" {%BYTES})&Tk
fieldNumber = intLit

field = label WS type WS fieldName WS '=' WS fieldNumber (WS '[' WS fieldOptions WS ']' $3)? WS ';'
  {Field(label=$0, typ=$2, name=$4, fieldNumber=$8, options=$9)}
fieldOptions = fieldOption (WS ',' WS fieldOption)* {[$0] + $1}
fieldOption = optionName WS '=' WS constant {FieldOption(name=$0, value=$4)}

group = label WS "group"&Tk WS groupName WS '=' WS fieldNumber WS messageBody {Group(label=$0, name=$4, number=$8, body=$10)}

oneof = "oneof"&Tk WS oneofName WS '{' (WS (option | oneofField | emptyStatement))* WS '}' {OneofDef(name=$2, elems: [OneOfElem]=$5)}
oneofField = type WS fieldName WS '=' WS fieldNumber (WS '[' WS fieldOptions WS ']' $3)? WS ';' {OneofField(typ=$0, name=$2, number=$6, options=$7)}

mapField = "map"&Tk WS '<' WS keyType WS ',' WS type WS '>' WS mapName WS '=' WS fieldNumber (WS '[' WS fieldOptions WS ']' $3)? WS ';'
  {MapField(keyType=$4, valueType=$8, mapName=$12, number=$16, options=$17)}
keyType: %MapKeyType = ("int32" {%INT32} | "int64" {%INT64} | "uint32" {%UINT32} | "uint64" {%UINT64}
  | "sint32" {%SINT32} | "sint64" {%SINT64} | "fixed32" {%FIXED32} | "fixed64" {%FIXED64}
  | "sfixed32" {%SFIXED32} | "sfixed64" {%SFIXED64} | "bool" {%BOOL} | "string" {%STRING})&Tk

extensions = "extensions"&Tk WS ranges WS ';' {Extensions(ranges=$2)}

reserved = "reserved"&Tk WS (ranges | fieldNames) WS ';' {Reserved(value: ReservedBody=$2)}
ranges = range (WS ',' WS range)* {Ranges(values=[$0] + $1)}
range = intLit (WS "to"&Tk WS rangeEnd)? {Range(start=$0, end=$1)}
rangeEnd: RangeEnd = intLit {RangeEndValue(value=$0)} | "max"&Tk {RangeEndMax()}
fieldNames = fieldName (WS ',' WS fieldName)* {FieldNames(names=[$0] + $1)}

enum = "enum"&Tk WS enumName WS enumBody {EnumDef(name=$2, body=$4)}
enumBody:[EnumBodyElem] = '{' (WS (option | enumField | emptyStatement))* WS '}' $1
enumField = ident WS '=' (WS '-')? WS intLit (WS '[' WS enumValueOption (WS ',' WS enumValueOption)* WS ']' {[$3] + $4})? WS ';'
  {EnumFieldDef(name=$0, minus=ispresent($3), value=$5, options=$6)}
enumValueOption = optionName WS '=' WS constant {EnumValueOption(name=$0, value=$4)}

message = "message"&Tk WS messageName WS messageBody {Message(name=$2, body=$4)}
messageBody = '{' (WS messageBodyElem)* WS '}' $1
messageBodyElem: MessageBodyElem = field | enum | message | extend | extensions | group | option | oneof | mapField | reserved | emptyStatement

extend = "extend"&Tk WS messageType WS '{' (WS (field | group | emptyStatement))* WS '}' {Extend(name=$2, body:[ExtendBodyElem]=$5)}

service = "service"&Tk WS serviceName WS '{' (WS (option | rpc | stream | emptyStatement))* WS '}' {Service(name=$2, body:[ServiceBodyElem]=$5)}
// rpc = "rpc" rpcName "(" [ "stream" ] messageType ")" "returns" "(" [ "stream" ] messageType ")" (( "{" {option | emptyStatement } "}" ) | ";")
rpc = "rpc"&Tk WS rpcName WS '(' (WS "stream"&Tk)? WS messageType WS ')' WS "returns"&Tk WS '(' (WS "stream"&Tk)? WS messageType WS ')' WS rpcEnding
  {Rpc(name=$2, isInputStream = ispresent($5), inputType=$7, isOutputStream=ispresent($14), outputType=$16, options=$20)}
rpcEnding = '{' (WS (option | emptyStatement {null}))* WS '}' $1
  | ';' {[]}
stream = "stream"&Tk WS streamName WS '(' WS messageType WS ',' WS messageType WS ')' WS streamEnding {Stream(name=$2, type1=$6, type2=$10, options=$14)}
streamEnding = '{' (WS (option | emptyStatement {null}))* WS '}' $1
  | ';' {[]}


letter = 'A-Za-z'
capitalLetter = 'A-Z'
decimalDigit = '0-9'
octalDigit = '0-7'
hexDigit = '0-9A-Fa-f'

Tk = <'a-zA-Z0-9_'*>
WS = ' \n\r\t'*

ident = <letter (letter | decimalDigit | '_')* {str($0, $1)}> {Ident(name=$0)}
fullIdent = ident ('.' ident)* {FullIdent(names=[$0] + $1)}
messageName = ident
enumName = ident
fieldName = ident
oneofName = ident
mapName = ident
serviceName = ident
rpcName = ident
streamName = ident
messageType = '.'? (ident '.')* messageName {MessageType(firstDot=ispresent($0), parent=$1, name=$2)}
enumType = '.'? (ident '.')* enumName {EnumType(firstDot=ispresent($0), parent=$1, name=$2)}
groupName = <capitalLetter (letter | decimalDigit | '_')* {str($0, $1)}> {GroupName(name=$0)}

intLit: IntLit = <zeroLit | decimalLit | octalLit | hexLit>
zeroLit = '0' {DecimalLit("0")}
decimalLit = '1-9' decimalDigit* {DecimalLit(value=str($0, $1))}
octalLit = '0' octalDigit+ {OctalLit(value=str($0, $1))}
hexLit = '0' 'xX' hexDigit+ {HexLit(value=str($2))}

floatLit: FloatLit = decimals '.' decimals? exponent? {FloatLiteral(integral=$0, fractional=$2 ?: "", exponent:Exponent?=$3)}
  | decimals exponent {FloatLiteral($0, "", $1)}
  | '.' decimals exponent? {FloatLiteral("", $1, $2)}
  | "inf" {Inf()}
  | "nan" {NaN()}
decimals = decimalDigit+ {str($0)}
exponent = 'eE' sign? decimals {Exponent(sign=$1, value=$2)}

boolLit: %BoolLit = "true" {%TRUE} | "false" {%FALSE}

strLit: StrLit = '\'' charValue* '\'' {SingleQuoteStrLit(value=$1)}
  | '"' charValue* '"' {DoubleQuoteStrLit(value=$1)}
charValue: CharValue = hexEscape | octEscape | charEscape | .-'\n\\' {Character(value=$0)}
hexEscape = '\\' 'xX' hexDigit hexDigit {HexEscape(value=str($2, $3))}
octEscape = '\\' octalDigit octalDigit octalDigit {OctalEscape(value=str($1, $2, $3))}
charEscape = '\\' 'abfnrtv\\\'"' {CharEscape(value=$1)}

emptyStatement = ';' {EmptyStatement()}

constant: Constant = fullIdent-boolLit
  | sign? intLit {IntConstant(sign=$0, value=$1)}
  | sign? floatLit {FloatConstant(sign=$0, value=$1)}
  | strLit {StringConstant(value=$0)}
  | boolLit {BoolConstant(value=$0)}

sign: %Sign = '+' {%PLUS} | '-' {%MINUS}
