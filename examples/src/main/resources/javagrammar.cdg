CompilationUnit = (WS PackageDeclaration)? (WS ImportDeclaration)* (WS TypeDeclaration)* WS
PackageDeclaration = (PackageModifiers WS)? "package"&Tk WS Identifier (WS '.' WS Identifier)* WS ';'
PackageModifiers = PackageModifier (WS PackageModifier)*
PackageModifier = Annotation

ImportDeclaration = SingleTypeImportDeclaration

SingleTypeImportDeclaration = "import"&Tk WS TypeName WS ';'


TypeDeclaration = ClassDeclaration
  | InterfaceDeclaration
  | ';'

TypeName = Identifier {TypeName(parent=null, name=str($0))}
  | PackageOrTypeName '.' Identifier {TypeName($0, str($2))}
PackageOrTypeName = (Identifier '.')* Identifier {PackageOrTypeName(names=$0{str($0)} + [str($1)])}
ExpressionName = Identifier {ExpressionName(parent=null, name=str($0))}
  | AmbiguousName '.' Identifier {ExpressionName(parent=$0, name=str($2))}
MethodName = Identifier {MethodName(name=str($0))}
AmbiguousName = (Identifier '.')* Identifier {AmbiguousName(names=$0{str($0)} + [str($1)])}

NumericType = IntegralType
  | FloatingPointType
IntegralType = ("byte" {%BYTE} | "short" {%SHORT} | "int" {%INT} | "long" {%LONG} | "char" {%CHAR})&Tk {IntegralType(typ: %IntegralTypes = $0)}
FloatingPointType = ("float" {%FLOAT} | "double" {%DOUBLE})&Tk {FloatingPointType(typ:%FloatingPointTypes = $0)}


PrimitiveType: PrimitiveType = (Annotations WS $0)? NumericType {NumericPrimitiveType(annots=$0 ?: [], typ=$1)}
  | (Annotations WS $0)? "boolean"&Tk {BooleanPrimitiveType(annots=$0 ?: [])}


ReferenceType = ClassOrInterfaceType
  | TypeVariable
  | ArrayType

ClassOrInterfaceType = ClassType | InterfaceType
ClassType: ClassType = (Annotations WS)? Identifier (WS TypeArguments)? {ClassTypeName(annots=$0$0 ?: [], name=$1, typeArgs=$2)}
  | ClassOrInterfaceType WS '.' (WS Annotation)* WS Identifier (WS TypeArguments)? {BindedClassTypeName(parent=$0, annots=$3, name=$5, typeArgs=$6)}
InterfaceType: InterfaceType = ClassType
TypeVariable = (Annotations WS)? Identifier {TypeVariable(annots=$0$0 ?: [], name=$1)}
ArrayType = PrimitiveType WS Dims
  | ClassOrInterfaceType WS Dims
  | TypeVariable WS Dims



Block = '{' (WS BlockStatements)? WS '}' {Block(stmts=$1 ?: [])}
BlockStatements = BlockStatement (WS BlockStatement)* {[$0] + $1}
BlockStatement = LocalVariableDeclarationStatement
  | ClassDeclaration
  | Statement
LocalVariableDeclarationStatement = LocalVariableDeclaration WS ';'
LocalVariableDeclaration = (VariableModifiers WS)? UnannType WS VariableDeclaratorList {LocalVariableDeclaration(modifiers=$0 ?: [], typ=$1, decls=$3)}
VariableModifiers = VariableModifier (WS VariableModifier)* {[$0] + $1}
VariableModifier = Annotation | "final"&Tk
VariableDeclaratorList = VariableDeclarator (WS ',' WS VariableDeclarator)* {[$0] + $1}
VariableDeclarator = VariableDeclaratorId (WS '=' WS VariableInitializer)? {(VariableDeclarator(id=$0, init=$1))}
VariableDeclaratorId = Identifier (WS Dims)* {VariableDeclaratorId(name=$0, dims=$1)}
Dim = (Annotation (WS Annotation)* WS)? '[' WS ']' {Dim(annots=$0{[$0] + $1})}
Dims = Dim (WS Dim)* {[$0] + $1}
VariableInitializer = Expression | ArrayInitializer
ArrayInitializer = '{' (WS VariableInitializerList)? (WS ',')? WS '}'
VariableInitializerList = VariableInitializer (WS ',' WS VariableInitializer)*



Annotations = Annotation (WS Annotation)*

Statement = StatementWithoutTrailingSubstatement
  | LabeledStatement
  | IfThenStatement
  | IfThenElseStatement
  | WhileStatement
  | ForStatement

StatementWithoutTrailingSubstatement = Block
  | EmptyStatement
  | ExpressionStatement
  | BreakStatement
  | ContinueStatement
  | ReturnStatement
  | ThrowStatement
  | TryStatement

EmptyStatement = ';' {EmptyStatement()}

LabeledStatement = Identifier WS ':' WS Statement {LabeledStatement(label=$0, stmt=$4)}

ExpressionStatement = StatementExpression WS ';' $0
StatementExpression = Assignment
  | MethodInvocation
  | ClassInstanceCreationExpression

IfThenStatement = "if"&Tk WS '(' WS Expression WS ')' WS Statement {IfThenStatement(condition=$4, thenbody=$8)}
IfThenElseStatement = "if"&Tk WS '(' WS Expression WS ')' WS Statement WS "else"&Tk WS Statement {IfThenElseStatement(condition=$4, thenbody=$8, elsebody=$12)}

IfStatement = <IfThenStatement | IfThenElseStatement>

WhileStatement = "while"&Tk WS '(' WS Expression WS ')' WS Statement {WhileStatement(condition=$4, body=$8)}



ForStatement = BasicForStatement
BasicForStatement = "for"&Tk WS '(' WS ForInit WS ';' WS Expression WS ';' WS ForUpdate WS ')' WS Statement
                    {BasicForStatement(init=$4, condition=$8, update=$12, body=$16)}
ForInit = StatementExpressionList | LocalVariableDeclaration
ForUpdate = StatementExpressionList
StatementExpressionList = StatementExpression (WS ',' WS StatementExpression)* {[$0] + $1}

BreakStatement = "break"&Tk (WS Identifier)? WS ';' {BreakStatement(label=$1)}
ContinueStatement = "continue"&Tk (WS Identifier)? WS ';' {ContinueStatement(label=$1)}

ReturnStatement = "return"&Tk (WS Expression)? WS ';' {ReturnStatement(value=$1)}
ThrowStatement = "throw"&Tk (WS Expression)? WS ';' {ThrowStatement(exception=$1)}

TryStatement = "try"&Tk WS Block WS Catches {TryStatement(block=$2, catches=$4, finally=null)}
  | "try"&Tk WS Block (WS Catches)? WS Finally {TryStatement(block=$2, catches=$3, finally=$5)}
Catches = CatchClause (WS CatchClause)* {[$0] + $1}
CatchClause = "catch"&Tk WS '(' WS CatchFormalParameter WS ')' WS Block {CatchClause(catchingType=$4, handler=$8)}
CatchFormalParameter = (VariableModifiers WS)? CatchType WS VariableDeclaratorId
CatchType = UnannClassType (WS '|' WS ClassType)* {CatchType(typ=[$0] + $1)}
Finally = "finally"&Tk WS Block {FinallyBlock(body=$2)}




Expression = LambdaExpression
  | AssignmentExpression


LambdaExpression = LambdaParameters "->"&Tk LambdaBody

LambdaParameters = Identifier
  | '(' (WS FormalParameterList)? WS ')'
  | '(' WS InferredFormalParameterList WS ')'
InferredFormalParameterList = Identifier (WS ',' WS Identifier)*

LambdaBody = Expression | Block


AssignmentExpression = ConditionalExpression
  | Assignment
Assignment = LeftHandSide WS AssignmentOperator WS Expression
LeftHandSide = ExpressionName
  | FieldAccess
  | ArrayAccess
AssignmentOperator =
  ("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=")&Tk


ConditionalExpression = ConditionalOrExpression
  | ConditionalOrExpression WS '?'&Tk WS Expression WS ':' WS ConditionalExpression
  | ConditionalOrExpression WS '?'&Tk WS Expression WS ':' WS LambdaExpression

ConditionalOrExpression = ConditionalAndExpression
  | ConditionalOrExpression WS "||"&Tk WS ConditionalAndExpression


ConditionalAndExpression = InclusiveOrExpression
  | ConditionalAndExpression WS "&&"&Tk WS InclusiveOrExpression


InclusiveOrExpression: InclusiveOrExpression = ExclusiveOrExpression
  | InclusiveOrExpression WS "|"&Tk WS ExclusiveOrExpression {BinaryBinOp(op:%BinaryBinOps=%OR, lhs=$0, rhs=$4)}
ExclusiveOrExpression: ExclusiveOrExpression = AndExpression
  | ExclusiveOrExpression WS "^"&Tk WS AndExpression {BinaryBinOp(%XOR, $0, $4)}
AndExpression: AndExpression = EqualityExpression
  | AndExpression WS "&"&Tk WS EqualityExpression {BinaryBinOp(%AND, $0, $4)}
EqualityExpression: EqualityExpression = RelationalExpression
  | EqualityExpression WS "=="&Tk WS RelationalExpression {RelBinOp(op:%RelBinOps=%EQ, lhs=$0, rhs=$4)}
  | EqualityExpression WS "!="&Tk WS RelationalExpression {RelBinOp(%NE, $0, $4)}
RelationalExpression: RelationalExpression = ShiftExpression
  | RelationalExpression WS "<"&Tk WS ShiftExpression {RelBinOp(%LT, $0, $4)}
  | RelationalExpression WS ">"&Tk WS ShiftExpression {RelBinOp(%GT, $0, $4)}
  | RelationalExpression WS "<="&Tk WS ShiftExpression {RelBinOp(%LE, $0, $4)}
  | RelationalExpression WS ">="&Tk WS ShiftExpression {RelBinOp(%GE, $0, $4)}
  | RelationalExpression WS "instanceof"&Tk WS ReferenceType {InstanceOfOp(lhs=$0, rhs=$4)}
ShiftExpression: ShiftExpression = AdditiveExpression
  | ShiftExpression WS "<<"&Tk WS AdditiveExpression {ShiftBinOp(op:%ShiftBinOps=%SHL, lhs=$0, rhs=$4)}
  | ShiftExpression WS ">>"&Tk WS AdditiveExpression {ShiftBinOp(%SHR, $0, $4)}
  | ShiftExpression WS ">>>"&Tk WS AdditiveExpression {ShiftBinOp(%SAR, $0, $4)}
AdditiveExpression: AdditiveExpression = MultiplicativeExpression
  | AdditiveExpression WS "+"&Tk WS MultiplicativeExpression {ArithBinOp(op:%AdditiveOps=%ADD, lhs=$0, rhs=$4)}
  | AdditiveExpression WS "-"&Tk WS MultiplicativeExpression {ArithBinOp(%SUB, $0, $4)}
MultiplicativeExpression: MultiplicativeExpression = UnaryExpression
  | MultiplicativeExpression WS "*"&Tk WS UnaryExpression {ArithBinOp(%MUL, $0, $4)}
  | MultiplicativeExpression WS "/"&Tk WS UnaryExpression {ArithBinOp(%DIV, $0, $4)}
  | MultiplicativeExpression WS "%"&Tk WS UnaryExpression {ArithBinOp(%REM, $0, $4)}
UnaryExpression: UnaryExpression = PreIncrementExpression
  | PreDecrementExpression
  | "+"&Tk WS UnaryExpression {UnaryOp(op:%UnaryOps=%PLUS, operand=$2)}
  | "-"&Tk WS UnaryExpression {UnaryOp(%MINUS, $2)}
  | UnaryExpressionNotPlusMinus
PreIncrementExpression = "++"&Tk WS UnaryExpression {UnaryOp(%INCREMENT, $2)}
PreDecrementExpression = "--"&Tk WS UnaryExpression {UnaryOp(%DECREMENT, $2)}
UnaryExpressionNotPlusMinus: UnaryExpressionNotPlusMinus = PostfixExpression
  | "~"&Tk WS UnaryExpression {UnaryOp(%COMPLEMENT, $2)}
  | "!"&Tk WS UnaryExpression {UnaryOp(%NOT, $2)}
  | CastExpression
CastExpression: CastExpression = '(' WS PrimitiveType WS ')' WS UnaryExpression {PrimitiveCastExpression(targetType=$2, expr=$6)}
  | '(' WS ReferenceType (WS AdditionalBound)* WS ')' WS UnaryExpressionNotPlusMinus {ReferenceCastExpression(targetType=$2, bound=$3, expr=$7)}
  | '(' WS ReferenceType (WS AdditionalBound)* WS ')' WS LambdaExpression {ReferenceCastExpression($2, $3, $7)}
PostfixExpression: PostfixExpression = Primary
  | ExpressionName
  | PostIncrementExpression
  | PostDecrementExpression
PostIncrementExpression = PostfixExpression WS "++"&Tk {PostfixOp(op:%PostfixOps=%INCREMENT, operand=$0)}
PostDecrementExpression = PostfixExpression WS "--"&Tk {PostfixOp(%DECREMENT, $0)}



Primary: Primary = PrimaryNoNewArray
  | ArrayCreationExpression
PrimaryNoNewArray: PrimaryNoNewArray = Literal
  | ClassLiteral
  | "this"&Tk {This(parent=null)}
  | TypeName WS '.' WS "this"&Tk {This(parent=$0)}
  | '(' WS Expression WS ')' {Paren(expr=$2)}
  | ClassInstanceCreationExpression
  | FieldAccess
  | ArrayAccess
  | MethodInvocation
  | MethodReference
ClassLiteral: ClassLiteral = TypeName (WS '[' WS ']')* WS "."&Tk WS "class"&Tk {ClassOfTypeName(typeName=$0, dims=$1)}
  | NumericType (WS '[' WS ']')* WS "."&Tk WS "class"&Tk {ClassOfNumericType(typ=$0, dims=$1)}
  | "boolean"&Tk (WS '[' WS ']')* WS "."&Tk WS "class"&Tk {ClassOfBooleanType(dims=$1)}
  | "void"&Tk WS "."&Tk WS "class"&Tk {ClassOfVoidType(dims=[])}


FieldAccess: FieldAccess = Primary WS '.' WS Identifier {PrimaryFieldAccess(recv=$0, name=$4)}
  | "super"&Tk WS '.' WS Identifier {SuperFieldAccess(name=$4)}
  | TypeName WS '.' WS "super"&Tk WS '.' WS Identifier {TypeSuperFieldAccess(typeName=$0, name=$8)}
ArrayAccess = ExpressionName WS '[' WS Expression WS ']' {ArrayAccess(array=$0, index=$4)}
  | PrimaryNoNewArray WS '[' WS Expression WS ']' {ArrayAccess(array=$0, index=$4)}

ClassInstanceCreationExpression = UnqualifiedClassInstanceCreationExpression
  | ExpressionName WS "."&Tk WS UnqualifiedClassInstanceCreationExpression
  | Primary WS "."&Tk WS UnqualifiedClassInstanceCreationExpression
UnqualifiedClassInstanceCreationExpression = "new"&Tk WS TypeArguments? WS ClassOrInterfaceTypeToInstantiate WS '(' (WS ArgumentList)? WS ')' (WS ClassBody)?
  {UnqualifiedClassInstanceCreationExpression(typeArgs=$2, classOrInterfaceTypeToInstantiate=$4, args=$7 ?: [], body=$10)}
ClassOrInterfaceTypeToInstantiate = (Annotations WS)? Identifier (WS '.' (WS Annotations)? WS Identifier)*
 (WS TypeArgumentsOrDiamond)?
TypeArgumentsOrDiamond = TypeArguments
  | '<' WS '>'
TypeArguments = '<' WS TypeArgumentList WS '>'
TypeArgumentList = TypeArgument (WS ',' WS TypeArgument)*
TypeArgument = ReferenceType | Wildcard
Wildcard = (Annotations WS)? '?' (WS WildcardBounds)?
WildcardBounds = "extends"&Tk WS ReferenceType
  | "super"&Tk WS ReferenceType





MethodInvocation: MethodInvocation = MethodName WS '(' (WS ArgumentList)? WS ')' {PlainMethodInvocation(target=$0, args=$3 ?: [])}
  | TypeName WS '.' (WS TypeArguments)? WS Identifier WS '(' (WS ArgumentList)? WS ')' {MethodInvocationWithTypeArgs(target=$0, typeArgs=$3, name=$5, args=$8 ?: [])}
  | ExpressionName WS '.' (WS TypeArguments)? WS Identifier WS '(' (WS ArgumentList)? WS ')' {MethodInvocationWithTypeArgs(target=$0, typeArgs=$3, name=$5, args=$8 ?: [])}
  | Primary WS '.' (WS TypeArguments)? WS Identifier WS '(' (WS ArgumentList)? WS ')' {MethodInvocationWithTypeArgs(target=$0, typeArgs=$3, name=$5, args=$8 ?: [])}
  | "super"&Tk WS '.' (WS TypeArguments)? WS Identifier WS '(' (WS ArgumentList)? WS ')' {SuperMethodInvocation(target=null, typeArgs=$3, name=$5, args=$8 ?: [])}
  | TypeName WS '.' WS "super"&Tk WS '.' (WS TypeArguments)? WS Identifier WS '(' (WS ArgumentList)? WS ')' {SuperMethodInvocation(target=$0, typeArgs=$7, name=$9, args=$12 ?: [])}
ArgumentList = Expression (WS ',' WS Expression)*




MethodReference: MethodReference = ExpressionName WS "::"&Tk (WS TypeArguments)? WS Identifier {PlainMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | ReferenceType WS "::"&Tk (WS TypeArguments)? WS Identifier {PlainMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | Primary WS "::"&Tk (WS TypeArguments)? WS Identifier {PlainMethodReference(cls=$0, typeArgs=$3, name=$5)}
  | "super"&Tk WS "::"&Tk (WS TypeArguments)? WS Identifier {SuperMethodReference(target=null, typeArgs=$3, name=$5)}
  | TypeName WS '.' WS "super"&Tk WS "::"&Tk (WS TypeArguments)? WS Identifier {SuperMethodReference(target=$0, typeArgs=$7, name=$9)}
  | ClassType WS "::"&Tk (WS TypeArguments)? WS "new"&Tk {NewMethodReference(cls=$0, typeArgs=$3)}
  | ArrayType WS "::"&Tk WS "new"&Tk {NewArrayMethodReference(arrType=$0)}



ArrayCreationExpression: ArrayCreationExpression =
    "new"&Tk WS PrimitiveType WS DimExprs (WS Dims)? {PrimitiveArrayCreation(typ=$2, dimExprs=$4, dims=$5)}
  | "new"&Tk WS ClassOrInterfaceType WS DimExprs (WS Dims)? {ClassOrInterfaceArrayCreation(typ=$2, dimExprs=$4, dims=$5)}
  | "new"&Tk WS PrimitiveType WS Dims WS ArrayInitializer {PrimitiveArrayCreationWithInit(typ=$2, dims=$4, init=$6)}
  | "new"&Tk WS ClassOrInterfaceType WS Dims WS ArrayInitializer {ClassOrInterfaceArrayCreationWithInit(typ=$2, dims=$4, init=$6)}
DimExprs = DimExpr (WS DimExpr)* {[$0] + $1}
DimExpr = (Annotations WS $0)? '[' WS Expression WS ']' {DimExpr(annots=$0 ?: [], expr=$3)}



MethodDeclaration = (MethodModifiers WS $0)? MethodHeader WS MethodBody {MethodDeclaration(modifiers=$0 ?: [], header=$1, body=$3)}
MethodModifiers = MethodModifier (WS MethodModifier)* {[$0] + $1}
MethodModifier: MethodModifier = Annotation
  | ("public" {%PUBLIC} | 
     "protected" {%PROTECTED} |
     "private" {%PRIVATE} |
     "abstract" {%ABSTRACT} |
     "static" {%STATIC} |
     "final" {%FINAL})&Tk {MethodModifier(modifier: %MethodModifiers = $0)}
MethodHeader = Result WS MethodDeclarator (WS Throws)? TypeParameters (WS Annotations)? WS Result WS MethodDeclarator (WS Throws)?
MethodDeclarator = Identifier WS '(' (WS FormalParameterList)? WS ')' Dims?
Result: Result = UnannType {ResultType(typ=$0)}
  | "void"&Tk {VoidResultType()}
Throws = "throws"&Tk WS ExceptionTypeList
ExceptionTypeList = ExceptionType (WS ',' WS ExceptionType)* {[$0] + $1}
ExceptionType: ExceptionType = ClassType | TypeVariable
MethodBody = Block | ';'
TypeParameters = '<' WS TypeParameter (WS ',' WS TypeParameter)* WS '>'
TypeParameter = (TypeParameterModifiers WS)? Identifier (WS TypeBound)? {TypeParameter(modifiers=$0$0 ?: [], name=$1, bounds=$2)}
TypeParameterModifiers = TypeParameterModifier (WS TypeParameterModifier)* {[$0] + $1}
TypeParameterModifier: TypeParameterModifier = Annotation
TypeBound: TypeBound = "extends"&Tk WS TypeVariable {SingleTypeBound(extends=$2)}
  | "extends"&Tk WS ClassOrInterfaceType (WS AdditionalBound)* {ClassOrInterfaceTypeBound(extends=$2, bounds=$3)}
AdditionalBound = "&"&Tk WS InterfaceType


ClassDeclaration = NormalClassDeclaration
  | EnumDeclaration
NormalClassDeclaration = (ClassModifiers WS)? WS "class"&Tk WS Identifier (WS TypeParameters)? (WS Superclass)? (WS Superinterfaces)? WS ClassBody
ClassModifiers = ClassModifier (WS ClassModifier)* {[$0] + $1}
ClassModifier: ClassModifier = Annotation
  | ("public" {%PUBLIC} |
     "protected" {%PROTECTED} |
     "private" {%PRIVATE} |
     "abstract" {%ABSTRACT} |
     "static" {%STATIC} |
     "final" {%FINAL})&Tk {ClassModifier(modifier:%ClassModifiers = $0)}
Superclass = "extends"&Tk WS ClassType
Superinterfaces = "implements"&Tk WS InterfaceTypeList
InterfaceTypeList = InterfaceType (WS ',' WS InterfaceType)* {[$0] + $1}
ClassBody = '{' (WS ClassBodyDeclaration)* WS '}' {ClassBody(decls=$1)}
ClassBodyDeclaration = ClassMemberDeclaration
  | InstanceInitializer
  | StaticInitializer
  | ConstructorDeclaration
ClassMemberDeclaration = FieldDeclaration
  | MethodDeclaration
  | ClassDeclaration
  | InterfaceDeclaration
  | ';'


EnumDeclaration = (ClassModifiers WS)? "enum"&Tk WS Identifier (WS Superinterfaces)? WS EnumBody
EnumBody = '{' (WS EnumConstantList)? (WS ',')? (WS EnumBodyDeclarations)? WS '}'
EnumConstantList = EnumConstant (WS ',' WS EnumConstant)*
EnumConstant = (EnumConstantModifiers WS)? Identifier ('(' (WS ArgumentList)? WS ')')? (WS ClassBody)?
EnumConstantModifiers = EnumConstantModifier (WS EnumConstantModifier)*
EnumConstantModifier = Annotation
EnumBodyDeclarations = ';' (WS ClassBodyDeclaration)*


InstanceInitializer = Block
StaticInitializer = "static"&Tk WS Block
ConstructorDeclaration = (ConstructorModifier WS)? ConstructorDeclarator (WS Throws)? WS ConstructorBody
ConstructorDeclarator = (TypeParameters WS)? SimpleTypeName '(' (WS FormalParameterList)? WS ')'
SimpleTypeName = Identifier
ConstructorModifier = Annotation | ("public" | "protected" | "private")&Tk
ConstructorBody = '{' (WS ExplicitConstructorInvocation)? (WS BlockStatements)? WS '}'
ExplicitConstructorInvocation = (TypeArguments WS)? "this"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | (TypeArguments WS)? "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | ExpressionName WS '.' (WS TypeArguments)? WS "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'
  | Primary WS '.' (WS TypeArguments)? WS "super"&Tk WS '(' (WS ArgumentList)? WS ')' WS ';'



FieldDeclaration = (FieldModifiers WS)? UnannType WS VariableDeclaratorList
FieldModifiers = FieldModifier (WS FieldModifier)*
FieldModifier = Annotation
  | ("public" | "protected" | "private" | "static" | "final")&Tk


InterfaceDeclaration = NormalInterfaceDeclaration
  | AnnotationTypeDeclaration
NormalInterfaceDeclaration = (InterfaceModifiers WS)? "interface"&Tk WS Identifier (WS TypeParameters)?
 (WS ExtendsInterfaces)? WS InterfaceBody
InterfaceModifiers = InterfaceModifier (WS InterfaceModifier)*
InterfaceModifier = Annotation
  | ("public" | "protected" | "private" | "abstract" | "static")&Tk
ExtendsInterfaces = "extends"&Tk WS InterfaceTypeList
InterfaceBody = '{' (WS InterfaceMemberDeclaration)* WS '}'
InterfaceMemberDeclaration = ConstantDeclaration
  | InterfaceMethodDeclaration
  | ClassDeclaration
  | InterfaceDeclaration
  | ';'
InterfaceMethodDeclaration = (InterfaceMethodModifiers WS)? MethodHeader WS MethodBody
InterfaceMethodModifiers = InterfaceMethodModifier (WS InterfaceMethodModifier)*
InterfaceMethodModifier = Annotation
  | ("public" | "abstract" | "default" | "static")&Tk


AnnotationTypeDeclaration = (InterfaceModifiers WS)? '@' WS "interface"&Tk WS Identifier WS AnnotationTypeBody

AnnotationTypeBody = '{' (WS AnnotationTypeMemberDeclaration)* WS '}'
AnnotationTypeMemberDeclaration = AnnotationTypeElementDeclaration
  | ConstantDeclaration
  | ClassDeclaration
  | InterfaceDeclaration
  | ';'
AnnotationTypeElementDeclaration = (AnnotationTypeElementModifier WS)? UnannType WS Identifier WS '(' WS ')' (WS Dims)? (WS DefaultValue)? WS ';'
AnnotationTypeElementModifier = Annotation | ("public" | "abstract")&Tk
DefaultValue = "default"&Tk WS ElementValue


ConstantDeclaration = (ConstantModifiers WS)? UnannType WS VariableDeclaratorList WS ';'
ConstantModifiers = ConstantModifier (WS ConstantModifier)*
ConstantModifier = Annotation
  | ("public" | "static" | "final")&Tk
FormalParameterList = FormalParameters WS ',' WS LastFormalParameter
  | LastFormalParameter
FormalParameters = FormalParameters (WS ',' WS FormalParameter)?
FormalParameter = (VariableModifiers WS)? UnannType WS VariableDeclaratorId
LastFormalParameter = (VariableModifiers WS)? UnannType (WS Annotations)? WS "..."&Tk WS VariableDeclaratorId WS FormalParameter





Annotation = NormalAnnotation
  | MarkerAnnotation
  | SingleElementAnnotation
NormalAnnotation = '@' WS TypeName WS '(' (WS ElementValuePairList)? WS ')'
ElementValuePairList = ElementValuePair (WS ',' WS ElementValuePair)*
ElementValuePair = Identifier WS '=' WS ElementValue
ElementValue = ConditionalExpression
  | ElementValueArrayInitializer
  | Annotation
ElementValueArrayInitializer = '{' (WS ElementValueList)? (WS ',')? WS '}'
ElementValueList = ElementValue (WS ',' WS ElementValue)*

MarkerAnnotation = '@' WS TypeName
SingleElementAnnotation = '@' WS TypeName WS '(' WS ElementValue WS ')'





UnannType = UnannPrimitiveType
  | UnannReferenceType
UnannPrimitiveType = NumericType
  | "boolean"&Tk
UnannReferenceType = UnannClassOrInterfaceType
  | UnannTypeVariable
  | UnannArrayType
UnannClassOrInterfaceType = UnannClassType
  | UnannInterfaceType
UnannClassType = Identifier (WS TypeArguments)?
  | UnannClassOrInterfaceType WS '.' (WS Annotations)? WS Identifier (WS TypeArguments)?
UnannInterfaceType = UnannClassType
UnannTypeVariable = Identifier
UnannArrayType = UnannPrimitiveType WS Dims
  | UnannClassOrInterfaceType WS Dims
  | UnannTypeVariable WS Dims


WS = (' \t\u000c' | LineTerminator | Comment)*
LineTerminator = <'\n' | '\r' | "\n\r">
Comment = BlockComment | LineComment
BlockComment = "/*" ((. !"*/")* .)? "*/"
LineComment = "//" (.-'\n')* (EOF | '\n')
EOF = !.

Tk = Token
Token = Identifier | Keyword | Literal | Separator | Operator
Word = <'a-zA-Z0-9_'+>
Identifier = Word-(Keyword | BooleanLiteral | NullLiteral)
Keyword = ("abstract" | "continue" | "for" | "new" | "switch" | "assert" | "default" | "if" | "package" | "synchronized" | "boolean" | "do" | "goto" | "private" | "this" | "break" | "double" | "implements" | "protected" | "throw" | "byte" | "else" | "import" | "public" | "throws" | "case" | "enum" | "instanceof" | "return" | "transient" | "catch" | "extends" | "int" | "short" | "try" | "char" | "final" | "interface" | "static" | "void" | "class" | "finally" | "long" | "strictfp" | "volatile" | "const" | "float" | "native" | "super" | "while")&Word

BooleanLiteral = ("true" {%TRUE} | "false" {%FALSE})&Tk {BooleanLiteral(value: %BooleanLiteralEnums=$0)}

NullLiteral = "null"&Tk {NullLiteral()}

Literal = IntegerLiteral
  | FloatingPointLiteral
  | BooleanLiteral
  | CharacterLiteral
  | StringLiteral
  | NullLiteral
IntegerLiteral: IntegerLiteral = DecimalIntegerLiteral
  | HexIntegerLiteral
DecimalIntegerLiteral = DecimalNumeral IntegerTypeSuffix? {DecimalIntegerLiteral(numeral=$0, suffix=$1)}
HexIntegerLiteral = HexNumeral IntegerTypeSuffix? {HexIntegerLiteral(numeral=$0, suffix=$1)}

DecimalNumeral = '0' {DecimalNumeral(value="0")}
  | NonZeroDigit Digits? {DecimalNumeral(str($0, $1))}
  | NonZeroDigit Underscores Digits {DecimalNumeral(str($0, $1, $2))}
NonZeroDigit = '1-9'
Digits = Digit
  | Digit DigitsAndUnderscores? Digit
Digit = '0-9'
DigitsAndUnderscores = DigitOrUnderscore DigitOrUnderscore*
DigitOrUnderscore = Digit | '_'
Underscores = '_'+

HexNumeral = '0' 'xX' HexDigits
HexDigits = HexDigit | HexDigit HexDigitsAndUnderscores? HexDigit
HexDigit = '0-9a-fA-F'
HexDigitsAndUnderscores = HexDigitOrUnderscore+
HexDigitOrUnderscore = HexDigit | '_'

IntegerTypeSuffix = 'l' | 'L'

FloatingPointLiteral = DecimalFloatingPointLiteral
DecimalFloatingPointLiteral = Digits '.' Digits? ExponentPart? FloatTypeSuffix? {DecimalFloatingPointLiteral(integral=str($0), frac=str($2), exp=$3, suffix=$4)}
  | '.' Digits ExponentPart? FloatTypeSuffix? {DecimalFloatingPointLiteral(integral="", frac=str($1), exp=$2, suffix=$3)}
  | Digits ExponentPart FloatTypeSuffix? {DecimalFloatingPointLiteral(integral=str($0), frac="", exp=$1, suffix=$2)}
  | Digits ExponentPart? FloatTypeSuffix {DecimalFloatingPointLiteral(integral=str($0), frac="", exp=$1, suffix=$2)}
ExponentPart = 'eE' '+\-' Digits {ExponentPart(sign=$1, digits=str($2))}
FloatTypeSuffix = 'fFdD'

CharacterLiteral = '\'' SingleCharacter '\'' | '\'' EscapeSequence '\''
SingleCharacter = .-'\'\\'
EscapeSequence: EscapeSequence = '\\' 'btnfr\'"\\' {EscapeChar(c=$1)}
  | OctalEscape
OctalEscape = '\\' '0-7' {OctalEscape(seq=str($1))}
  | '\\' '0-7' '0-7' {OctalEscape(seq=str($1, $2))}
  | '\\' '0-3' '0-7' '0-7' {OctalEscape(seq=str($1, $2, $3))}


StringLiteral = '"' StringCharacter* '"' {StringLiteral(chars=$1)}
StringCharacter: StringCharacter = .-'"\\' {StringChar(value=chr($0))}
  | EscapeSequence

Separator = <'(){}[];,.@' | "..." | "::">
Operator = <"=" | ">" | "<" | "!" | "~" | "?" | ":" | "->" | "==" | ">=" | "<=" | "!=" | "&&" | "||" | "++" | "--" | "+" | "-" | "*" | "/" | "&" | "|" | "^" | "%" | "<<" | ">>" | ">>>" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=" | "<<=" | ">>=" | ">>>=">
