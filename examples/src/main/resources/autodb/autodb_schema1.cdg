Database = (WS DatabaseElem)* WS $0
DatabaseElem: DatabaseElem = (Entity | VersionEntity | DataTypeDef | TypeDef | IdGenDef)

Entity = "entity"&Tk WS EntityName (WS EntityFields)? (WS EntityKeys)? (WS EntityBody)? {Entity(name=$2, fields=$3, keys=$4, body=$5)}
EntityFields = '(' WS (EntityField (WS ',' WS EntityField)* (WS ',')? WS {[$0] + $1})? ')' $2
EntityField = (FieldAnnotations WS $0)? FieldName (WS ':' WS FieldType) {EntityField(name=$1, typ=$2, annots=$0)}
EntityFieldOptType = FieldName (WS ':' WS FieldType)? {EntityFieldOptType(name=$0, typ=$1)}
EntityKeys = <EntityKey (WS ',' WS EntityKey)* {[$0] + $1}>
EntityKey: EntityKey = "key"&Tk WS EntityKeyFields {PrimaryKey(fields=$2)}
                     | "unique"&Tk WS EntityKeyFields {UniqueKey(fields=$2)}
                     | "table"&Tk WS '(' WS EntityName WS ')' {TableName(name=$4)}
EntityKeyFields = '(' WS FieldName (WS ',' WS FieldName)* WS ')' {[$2] + $3}
EntityBody = '{' (WS EntityBodyElem)* WS '}' {$1}
EntityBodyElem = VersionEntity
VersionEntity = "version"&Tk WS "entity"&Tk WS EntityName (WS VersioningKey)? (WS EntityFields)? (WS EntityKeys)? (WS VersionEntityBody)? {VersionEntity(name=$4, versioningKeys=$5, field=$6, keys=$7, body=$8)}
VersioningKey = '[' (WS EntityFieldOptType) (WS ',' WS EntityFieldOptType) (WS ',' WS EntityFieldOptType) (WS ',')? WS ']' {VersioningKey(target=$1, version=$2, timestamp=$3)}
VersionEntityBody = '{' WS '}'
EntityName = Name
FieldName = Name
DataTypeName = Name
DataFieldName = Name
Tk = <'a-zA-Z0-9_'+>
WS = ' \n\r\t'*
FieldType: FieldType = Type | "@DeleteFlag" {DeleteFlag()}
Type = ValueType (WS '?')? {Type(valueType=$0, nullable=ispresent($1))}
ValueType: ValueType = PrimitiveType {PrimitiveType(typ=$0)} | LengthLimitedType | RefType | ListType | Name {CustomType(name=$0)} | EnumDef | OneOfDef | DataTypeDef
PrimitiveType: %PrimType = ("Int" {%INT} | "Long" {%LONG} | "Timestamp" {%TIMESTAMP})&Tk
LengthLimitedType: LengthLimitedType = "String" (WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' $3)? {StringType(length=$1)}
  | "URI" (WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' $3)? {URIType(length=$1)}
  | "Blob" WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' {BlobType(length=$4)}
RefType = "Ref"&Tk WS '<' WS Type WS '>' {RefType(entity=$4)}
ListType = "List"&Tk WS '<' WS Type WS '>' {RefType(entity=$4)}
Name = Tk-Keywords {str($0)}
Keywords = "Int" | "Long" | "String" | "Timestamp" | "URI" | "Ref" | "List" | "veresion" | "entity"
  | "autoincrement" | "sparsegenLong"
TypeDef = "type"&Tk WS Name WS '=' WS Type {TypeDef(name=$2, typ=$6)}
EnumDef = "enum"&Tk WS '{' WS Name (WS ',' WS Name)* WS '}' {EnumDef(values=[$4] + $5)}
IdGenDef = "idgen"&Tk WS Name WS '=' WS IdGenSpec {IdGenDef(name=$2, idgen=$6)}
IdGenSpecName = Name

FieldAnnotations = FieldAnnotation (WS FieldAnnotation)*
FieldAnnotation: FieldAnnotation = VersionedAnnotation | IdGenAnnotation
VersionedAnnotation = '@' "versioned"&Tk WS '(' WS EntityName WS ')' {VersionedAnnotation(entity=$5)}
IdGenAnnotation = '@' "idgen"&Tk WS '(' WS IdGenSpec WS ')' {IdGenAnnotation(spec=$5)}

IdGenSpec: IdGenSpec = IdGenSpecName {IdGenName(name=$0)}
  | "autoincrement"&Tk {AutoIncrementIdGen()}
  | "sparsegenLong"&Tk WS '(' WS SparseGenParam (WS ',' WS SparseGenParam)* WS ')' {SparseGenLongSpec(params=[$4] + $5)}
SparseGenParam: SparseGenParam = "baseTimestamp"&Tk WS '=' WS TimestampDef {BaseTimestamp(timestamp=$4)}
  | "timestampPrecision"&Tk WS '=' WS ("Seconds" {%SECONDS} | "Millis" {%MILLIS}) {TimestampPrecision(precision:%TimestampPrecisionType=$4)}
  | "format"&Tk WS '=' WS '[' SparseGenFormatElem (WS ',' WS SparseGenFormatElem)* ']' {SparseGenFormat(elems=[$5] + $6)}
SparseGenFormatElem = ("timestamp" {%TIMESTAMP} | "nodeId" {%NODE_ID} | "seqNum" {%SEQ_NUMBER})&Tk WS ':' WS ('0' {"0"} | <'1-9' '0-9'* {str($0, $1)}>) {SparseGenFormatElem(elemType:%SparseGenFormatElemType=$0, bitLen=$4)}
TimestampDef = DateDef ' '+ TimeDef (' '* TimeOffset)? {TimestampDef(date=$0, time=$2, offset=$3)}
DateDef = ('0-9' '0-9' '0-9' '0-9' {str($0, $1, $2, $3)}) '-' ('0-9' '0-9' {str($0, $1)}) '-' ('0-9' '0-9' {str($0, $1)}) {DateDef(year=$0, month=$2, day=$4)}
TimeDef = ('0-9' '0-9' {str($0, $1)}) ':' ('0-9' '0-9' {str($0, $1)})
          (':' ('0-9' '0-9' {str($0, $1)})
            ('.' ('0-9' '0-9' '0-9' {str($0, $1, $2)} |
                  '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' {str($0, $1, $2, $3, $4, $5, $6, $7, $8)})
            )? {Second(second=$1, fraction=$2)})? {TimeDef(hour=$0, minute=$2, second=$3)}
TimeOffset = 'Z' {TimeOffset(sign='+', hour="00", minute:string?="00")}
  | <'+\-' ('0-9' '0-9' {str($0, $1)}) (':'? ('0-5' '0-9' {str($0, $1)}))? {TimeOffset(sign=$0, hour=$1, minute=$2)}>

DataTypeDef = "data"&Tk WS DataTypeName WS '(' WS DataFields WS ')' (WS '{' (WS DataTypeBodyElem)* WS '}')? {DataTypeDef(name=$2, fields=$6, body=$9$2)}
DataTypeBodyElem: DataTypeBodyElem = DataTypeDef | TypeDef
DataFields = DataField (WS ',' WS DataField)* (WS ',')? {[$0] + $1}
DataField = DataFieldAnnotations WS DataFieldName WS ':' WS Type
DataFieldAnnotations = DataFieldTagAnnotation (WS DataFieldAnnotation)*
DataFieldTagAnnotation = '@' "tag"&Tk WS '(' WS ('0' | '1-9' '0-9'*) WS ')' {TagAnnotation(tagnum=str($5))}
DataFieldAnnotation = "@@"

OneOfDef = "oneof"&Tk WS '{' WS DataFields WS '}' {OneOfDef(fields=$4)}
