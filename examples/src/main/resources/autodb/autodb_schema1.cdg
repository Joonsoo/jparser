Database = (WS DatabaseElem)* WS $0
DatabaseElem: DatabaseElem = (Entity | DataTypeDef | IdGenDef | EnumDef)

Entity = "entity"&Tk WS EntityName (WS EntityFields)? (WS EntityKeys)? (WS EntityBody)?
    {Entity(name=$2, fields: [EntityField]=$3 ?: [], keys=$4 ?: [], body=$5 ?: [])}
EntityFields: [EntityField] = '(' WS (EntityField (WS ',' WS EntityField)* (WS ',')? WS {[$0] + $1})? ')' {$2 ?: []}
EntityField = (FieldAnnotations WS $0)? FieldName (WS ':' WS FieldType) {EntityField(name=$1, typ=$2, annots=$0 ?: [])}
EntityFieldOptType = FieldName (WS ':' WS FieldType)? {EntityFieldOptType(name=$0, typ=$1)}
EntityKeys = <EntityKey (WS ',' WS EntityKey)* {[$0] + $1}>
EntityKey: EntityKey = "key"&Tk WS EntityKeyFields {PrimaryKey(fields=$2)}
                     | "unique"&Tk WS EntityKeyFields {UniqueKey(fields=$2)}
                     | "table"&Tk WS '(' WS EntityName WS ')' {TableName(name=$4)}
                     | "index"&Tk WS EntityKeyFields {IndexKey(fields=$2)}
EntityKeyFields = '(' WS FieldName (WS ',' WS FieldName)* WS ')' {[$2] + $3}
EntityBody = '{' (WS EntityBodyElem)* WS '}' {$1}
EntityBodyElem: EntityBodyElem = VersionEntity | EntityView | PreDefinedEntityView
VersionEntity = "version"&Tk WS "entity"&Tk WS EntityName (WS VersioningInfo)? (WS EntityFields)? (WS EntityKeys)? (WS VersionEntityBody)?
    {VersionEntity(name=$4, versioningInfo=$5, fields: [EntityField]=$6 ?: [], keys=$7 ?: [], body=$8 ?: [])}
VersioningInfo = '[' (WS FieldName) (WS ',' WS FieldName) (WS ',' WS FieldName) (WS ',' WS FieldName) (WS ',')? WS ']'
                {VersioningInfo(keyFieldName=$1, versionFieldName=$2, timestampFieldName=$3, deletedFlagFieldName=$4)}
VersionEntityBody = '{' (WS VersionEntityElem)* WS '}' $1
VersionEntityElem: VersionEntityElem = EntityView
EntityView = "view"&Tk WS DataTypeName WS '(' WS EntityViewField (WS ',' WS EntityViewField)* (WS ',')? WS ')' {EntityView(name=$2, fields=[$6]+$7)}
EntityViewField: EntityViewField = EntityViewFieldAsIs | EntityViewFieldSelect
EntityViewFieldAsIs = DataFieldTagAnnotation WS FieldName {EntityViewFieldAsIs(tag=$0, name=$2)}
EntityViewFieldSelect = DataFieldTagAnnotation WS FieldName (WS ':' WS Type)? WS '=' WS EntityViewFieldSelectExpr
    {EntityViewFieldSelect(tag=$0, name=$2, typ=$3, expr=$7)}
EntityViewFieldSelectExpr: EntityViewFieldSelectExpr = EntityViewFieldSelectTerm
    | EntityViewFieldSelectTerm WS <"==" {%EQ} | "!=" {%NE}> WS EntityViewFieldSelectExpr {BinOp(op:%BinOpType=$2, lhs=$0, rhs=$4)}
EntityViewFieldSelectTerm: EntityViewFieldSelectTerm = "null"&Tk {NullValue()}
    | FieldName ((WS '?')? WS '.' WS DataFieldName {DataTypeValueSelectField(nullable=ispresent($0), fieldName=$4)})* {DataTypeValueSelect(field=$0, selectPath=$1)}
    | "@primaryKey" {PrimaryKeySelect()}
    | '(' WS EntityViewFieldSelectExpr WS ')' {Paren(expr=$2)}
PreDefinedEntityView = "view"&Tk WS FieldRef WS '(' WS PreDefinedEntityViewField (WS ',' WS PreDefinedEntityViewField)* (WS ',')? WS ')'
    {PreDefinedEntityView(definition=$2, fields=[$6]+$7)}
PreDefinedEntityViewField = FieldName {PreDefinedEntityViewField(originalFieldName=$0, thisEntityFieldName=$0)}
    | FieldName WS '=' WS FieldName {PreDefinedEntityViewField(originalFieldName=$0, thisEntityFieldName=$4)}
EntityName = Name
FieldName = Name
DataTypeName = Name
DataFieldName = Name
Tk = <'a-zA-Z0-9_'+>
WS = (' \n\r\t' | LineComment)*
LineComment = "//" (.-'\n')* (EOF | '\n')
EOF = !.

FieldType: FieldType = Type
Type = ValueType (WS '?')? {Type(valueType=$0, nullable=ispresent($1))}
ValueType: ValueType = PrimitiveType {PrimitiveType(typ=$0)} | LengthLimitedType | RefType | ListType | Name {CustomType(name=$0)} | OneOfCaseType | EnumDef | OneOfDef | DataTypeDef
PrimitiveType: %PrimType = ("Int" {%INT} | "Long" {%LONG} | "Timestamp" {%TIMESTAMP} | "Duration" {%DURATION} | "Boolean" {%BOOLEAN} | "Empty" {%EMPTY})&Tk
LengthLimitedType: LengthLimitedType = "String" (WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' $3)? {StringType(length=$1)}
  | "URI" (WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' $3)? {URIType(length=$1)}
  | "Blob" WS '(' WS ('1-9' '0-9'* {str($0, $1)}) WS ')' {BlobType(length=$4)}
RefType = "Ref"&Tk WS '<' WS EntityName WS '>' {RefType(entity=$4)}
ListType = "List"&Tk WS '<' WS Type WS '>' {ListType(elemType=$4)}
Name = Tk-Keywords {str($0)}
OneOfCaseType = "OneOfCase"&Tk WS '<' WS FieldRef WS '>' {OneOfCaseType(field=$4)}
FieldRef = Name (WS '.' WS Name)+ {FieldRef(names=[$0] + $1)}
Keywords = "Int" | "Long" | "String" | "Timestamp" | "Duration" | "URI" | "Boolean" | "Empty" | "Ref" | "List" | "entity"
  | "autoincrement" | "sparsegenLong" | "view" | "null"
  | "==" | "!="
EnumDef = "enum"&Tk WS Name WS '{' WS EnumValueDef (WS ',' WS EnumValueDef)* (WS ',')? WS '}' {EnumDef(name=$2, values=[$6] + $7)}
EnumValueDef = DataFieldTagAnnotation WS Name {EnumValueDef(tag=$0, name=$2)}
IdGenDef = "idgen"&Tk WS Name WS '=' WS IdGenSpec {IdGenDef(name=$2, idgen=$6)}
IdGenSpecName = Name

FieldAnnotations = FieldAnnotation (WS FieldAnnotation)* {[$0] + $1}
FieldAnnotation: FieldAnnotation = VersionedAnnotation | IdGenAnnotation
VersionedAnnotation = '@' "versioned"&Tk {VersionedAnnotation()}
IdGenAnnotation = '@' "idgen"&Tk WS '(' WS IdGenSpec WS ')' {IdGenAnnotation(spec=$5)}

IdGenSpec: IdGenSpec = IdGenSpecName {IdGenName(name=$0)}
  | "autoincrement"&Tk (WS '(' WS Name WS ')' $3)? {AutoIncrementIdGen(seqName = $1)}
  | "sparsegenLong"&Tk WS '(' WS SparseGenParam (WS ',' WS SparseGenParam)* WS ')' {SparseGenLongSpec(params=[$4] + $5)}
SparseGenParam: SparseGenParam = "baseTimestamp"&Tk WS '=' WS TimestampDef {BaseTimestamp(timestamp=$4)}
  | "timestampPrecision"&Tk WS '=' WS ("Seconds" {%SECONDS} | "Millis" {%MILLIS}) {TimestampPrecision(precision:%TimestampPrecisionType=$4)}
  | "format"&Tk WS '=' WS '[' SparseGenFormatElem (WS ',' WS SparseGenFormatElem)* ']' {SparseGenFormat(elems=[$5] + $6)}
SparseGenFormatElem = ("timestamp" {%TIMESTAMP} | "nodeId" {%NODE_ID} | "seqNum" {%SEQ_NUMBER})&Tk WS ':' WS ('0' {"0"} | <'1-9' '0-9'* {str($0, $1)}>) {SparseGenFormatElem(elemType:%SparseGenFormatElemType=$0, bitLen=$4)}
TimestampDef = DateDef ' '+ TimeDef (' '* TimeOffset)? {TimestampDef(date=$0, time=$2, offset=$3)}
DateDef = ('0-9' '0-9' '0-9' '0-9' {str($0, $1, $2, $3)}) '-' ('0-9' '0-9' {str($0, $1)}) '-' ('0-9' '0-9' {str($0, $1)}) {DateDef(year=$0, month=$2, day=$4)}
TimeDef = ('0-9' '0-9' {str($0, $1)}) ':' ('0-9' '0-9' {str($0, $1)})
          (':' ('0-9' '0-9' {str($0, $1)})
            ('.' ('0-9' '0-9' '0-9' {str($0, $1, $2)} |
                  '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' '0-9' {str($0, $1, $2, $3, $4, $5, $6, $7, $8)})
            )? {Second(second=$1, fraction=$2)})? {TimeDef(hour=$0, minute=$2, second=$3)}
TimeOffset = 'Z' {TimeOffset(sign='+', hour="00", minute:string?="00")}
  | <'+\-' ('0-9' '0-9' {str($0, $1)}) (':'? ('0-5' '0-9' {str($0, $1)}))? {TimeOffset(sign=$0, hour=$1, minute=$2)}>

DataTypeDef = "data"&Tk WS DataTypeName WS '(' WS DataFields WS ')' {DataTypeDef(name=$2, fields=$6)}
DataFields = DataField (WS ',' WS DataField)* (WS ',')? {[$0] + $1}
DataField = (DataFieldAnnotations WS $0)? DataFieldName WS ':' WS Type {DataField(annots=$0, name=$1, typ=$5)}
DataFieldAnnotations = DataFieldTagAnnotation (WS DataFieldAnnotation)* {DataFieldAnnotations(tag:TagAnnotation?=$0, annots=$1)}
    | DataFieldAnnotation (WS DataFieldAnnotation)* {DataFieldAnnotations(tag=null, annots=[$0] + $1)}
DataFieldTagAnnotation = '@' "tag"&Tk WS '(' WS ('0' {"0"}| '1-9' '0-9'* {str($0, $1)}) WS ')' {TagAnnotation(tagnum=$5)}
DataFieldAnnotation = "@@" {DataFieldAnnotation()}

OneOfDef = "oneof"&Tk WS '{' WS DataFields WS '}' {OneOfDef(fields=$4)}
