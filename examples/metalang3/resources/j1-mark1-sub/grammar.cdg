SourceFile = (WS TopLevelElem)* WS {SourceFile(elems=$0)}

TopLevelElem: TopLevelElem = VarDef

Type: Type = PrimitiveType

PrimitiveType = ("int" {%Int})&Tk {PrimitiveType(type: %PrimitiveTypes=$0)}

Expr: Expr = <Disjunction>

VarDef = "var"&Tk WS Identifier WS ':' WS Type (WS '=' WS Expr)? {VarDef(name=$2, type=$6, init=$7)}

// 처음엔 array도 field도 없음.
LeftHandSide: LeftHandSide = Identifier

Disjunction: Disjunction = CastAs
  | Disjunction WS "||"&Tk WS CastAs {BinOp(op:%BinOps=%OR, lhs=$0, rhs=$4)}

CastAs: CastAs = Primary
  | Primary WS "as"&Tk WS Type {CastAsType(operand=$0, type=$4)}

Primary: Primary = Literal
  | Identifier
  | IfExpr


IfExpr = "if"&Tk WS '(' WS Expr WS ')' WS Expr (WS "else"&Tk WS Expr)?
         {IfExpr(condition=$4, ifTrue=$8, ifFalse=$9)}

Literal: Literal = IntLiteral

IntLiteral: IntLiteral = DecimalNumeral

DecimalNumeral = '0' {DecimalNumeral(value="0")}
  | '1-9' Digits? {DecimalNumeral(value=str($0, $1))}
Digits = '0-9' ('_'? '0-9')* {str($0, $1)}



Word = 'a-zA-Z_' 'a-zA-Z_0-9'* {str($0, $1)}
Identifier = (Word-Reserved)&Tk {Identifier(name=$0)}

Reserved = "var" | "while" | "if" | "else" | "break" | "continue" | "return"
  | "boolean" | "byte" | "short" | "int" | "long"
  | "ushort" | "uint" | "ulong" | "float" | "double"
  | "true" | "false"

Tk = <'a-zA-Z0-9_'+ | TkSeq>
TkSeq = "!" | "!=" | "%" | "%=" | "&" | "&&" | "&=" | "*" | "*=" | "+" | "++" | "+=" | "-" | "--" | "-=" | "->" | "..." | "/" | "/=" | "::" | "<" | "<<" | "<<=" | "<=" | "=" | "==" | ">" | ">=" | ">>" | ">>=" | ">>>" | ">>>=" | "^" | "^=" | "|" | "|=" | "||" | "~"


WS = ' \n\r\t'*