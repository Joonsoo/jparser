SourceFile = (WS TopLevelElem)* WS {SourceFile(elems=$0)}

TopLevelElem: TopLevelElem = ExternFunctionDecl
  | FunctionDef
  | VarDef

ExternFunctionDecl = "extern"&Tk WS FunctionHeader

FunctionHeader = "fun"&Tk WS Identifier WS FunctionParams (WS ':' WS Type)?
                 {FunctionHeader(name=$2, params=$4, returnType=$5)}

FunctionParams = '(' WS ')' {FunctionParams(params=[])}
  | '(' WS FunctionParam (WS ',' WS FunctionParam)* (WS ',')? WS ')' {FunctionParams([$2] + $3)}
FunctionParam = Identifier WS ':' WS Type {FunctionParam(name=$0, type=$4)}

FunctionDef = FunctionHeader WS FunctionBody {FunctionDef(header=$0, body=$2)}

FunctionBody = Block

VarDef = "var"&Tk WS Identifier WS ':' WS Type (WS '=' WS Expr)? {VarDef(name=$2, type=$6, init=$7)}

Type: Type = <RefType>

// &int
RefType: RefTypeOr = ArrayType
  | '&' WS RefType {RefType(ref=$2)}

// var x: &Animal[10] = [new Animal(), null, ...]
// &Animal[10] == &(Animal[10])
// var x: (&Animal)[10] = []
ArrayType: ArrayTypeOr = PrimaryType
  | ArrayType WS '[' WS IntLiteral WS ']' {ArrayType(elemType=$0, size=$4)}

PrimaryType: PrimaryType = PrimitiveType
  | UserType
  | '(' WS Type WS ')' {ParenType(type=$2)}

// string 타입은 실질적으로 byte array (혹은 null ended byte pointer)
PrimitiveType = (
  "boolean" {%Boolean} |
  "byte" {%Byte} |
  "short" {%Short} |
  "int" {%Int} |
  "long" {%Long} |
  "ushort" {%UShort} |
  "uint" {%UInt} |
  "ulong" {%ULong} |
  "float" {%Float} |
  "double" {%Double}
  )&Tk {PrimitiveType(type: %PrimitiveTypes=$0)}

UserType = Identifier {UserType(name=$0)}


Stmt: Stmt = Expr | VarDef

Expr: Expr = Block | <Additive>

Block = '{' (WS Stmt)* WS '}' {Block(stmts=$1)}

Additive: Additive = Primary
  | Additive WS "+"&Tk WS Primary {BinOp(op:%BinOps=%ADD, lhs=$0, rhs=$4)}
  | Additive WS "-"&Tk WS Primary {BinOp(%SUB, $0, $4)}

Primary: Primary = Literal
  | Identifier
  | IfExpr
  | '(' WS Expr WS ')' {Parenthesized(expr=$2)}

IfExpr = "if"&Tk WS '(' WS Expr WS ')' WS Stmt (WS "else"&Tk WS Stmt)?
         {IfExpr(condition=$4, ifTrue=$8, ifFalse=$9)}

Literal: Literal = BooleanLiteral
  | IntLiteral
  | FloatingPointLiteral
  | "null"&Tk {NullLiteral()}

BooleanLiteral: BooleanLiteral = ("true" {TrueLiteral()} | "false" {FalseLiteral()})&Tk

IntLiteral: IntLiteral = DecimalNumeral | HexNumeral

DecimalNumeral = '0' {DecimalNumeral(value="0")}
  | '1-9' Digits? {DecimalNumeral(value=str($0, $1))}
Digits = '0-9' ('_'? '0-9')* {str($0, $1)}

HexNumeral = '0' 'xX' HexDigits {HexNumeral(value=$2)}
HexDigits = '0-9A-Fa-f' HexDigit* {str($0, $1)}
HexDigit = '_'? '0-9A-Fa-f'

FloatingPointLiteral = DecimalFloatingPointLiteral
DecimalFloatingPointLiteral =
    Digits '.' Digits? ExponentPart? {FloatingPointLiteral(intPart=$0, fracPart=$2, expPart=$3)}
  | '.' Digits ExponentPart? {FloatingPointLiteral(intPart=null, fracPart=$1, expPart=$2)}
  | Digits ExponentPart {FloatingPointLiteral(intPart=$0, fracPart=null, expPart=$1)}
ExponentPart = 'eE' SignedInteger {ExponentPart(exponent=$1)}
SignedInteger = ('+' | '-')? Digits {SignedInteger(sign=$0, digits=$1)}


Word = 'a-zA-Z_' 'a-zA-Z_0-9'* {str($0, $1)}
Identifier = (Word-Reserved)&Tk {Identifier(name=$0)}

Reserved = "var" | "while" | "if" | "else" | "break" | "continue" | "return"
  | "boolean" | "byte" | "short" | "int" | "long"
  | "ushort" | "uint" | "ulong" | "float" | "double"
  | "true" | "false"
  | "null"

Tk = <'a-zA-Z0-9_'+ | TkSeq>
TkSeq = "=" | "+=" | "-=" | "*=" | "/=" | "%="
      | "||" | "&&" | "|" | "^" | "&"
      | "==" | "!=" | "<" | "<=" | ">" | ">="
      | "<<" | ">>" | "<<<"
      | "+" | "-" | "*" | "/" | "%"
      | "++" | "--" | "~" | "!"


WS = (' \n\r\t' | Comment)*


Comment = LineComment | BlockComment
LineComment = "//" (.-'\n')* (EOF | '\n')
BlockComment = "/*" (. !"*/")* . "*/" | "/**/"
EOF = !.
