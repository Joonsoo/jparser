// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mgroup3ParserData.proto

package com.giyeok.jparser.mgroup3.proto;

public interface AcceptConditionTemplateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.giyeok.jparser.mgroup3.proto.AcceptConditionTemplate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * longest 심볼의 PathStarter로부터 만들어진 경로가 이후에 finish되는 경우가 있으면 이번 path는 invalidate한다
   * (정확히는, longest 심볼의 PathStarter로부터 만들어진 경로가 이후에 finish되면 그 때 조건의 negation을 and로 붙인다)
   * </pre>
   *
   * <code>int32 longest = 1;</code>
   * @return Whether the longest field is set.
   */
  boolean hasLongest();
  /**
   * <pre>
   * longest 심볼의 PathStarter로부터 만들어진 경로가 이후에 finish되는 경우가 있으면 이번 path는 invalidate한다
   * (정확히는, longest 심볼의 PathStarter로부터 만들어진 경로가 이후에 finish되면 그 때 조건의 negation을 and로 붙인다)
   * </pre>
   *
   * <code>int32 longest = 1;</code>
   * @return The longest.
   */
  int getLongest();

  /**
   * <pre>
   * lookahead_found 심볼의 PathStarter로부터 만들어진 경로가 finish되어야만 이번 path도 valid하다
   * </pre>
   *
   * <code>int32 lookahead_found = 2;</code>
   * @return Whether the lookaheadFound field is set.
   */
  boolean hasLookaheadFound();
  /**
   * <pre>
   * lookahead_found 심볼의 PathStarter로부터 만들어진 경로가 finish되어야만 이번 path도 valid하다
   * </pre>
   *
   * <code>int32 lookahead_found = 2;</code>
   * @return The lookaheadFound.
   */
  int getLookaheadFound();

  /**
   * <pre>
   * lookahead_notfound 심볼의 PathStarter로부터 만들어진 경로가 finish되면 이번 path는 invalidate한다
   * </pre>
   *
   * <code>int32 lookahead_notfound = 3;</code>
   * @return Whether the lookaheadNotfound field is set.
   */
  boolean hasLookaheadNotfound();
  /**
   * <pre>
   * lookahead_notfound 심볼의 PathStarter로부터 만들어진 경로가 finish되면 이번 path는 invalidate한다
   * </pre>
   *
   * <code>int32 lookahead_notfound = 3;</code>
   * @return The lookaheadNotfound.
   */
  int getLookaheadNotfound();

  /**
   * <pre>
   * except 심볼의 PathStarter로부터 만들어진 경로가 finish되는 시점에는 이번 path는 invalid하다
   * </pre>
   *
   * <code>int32 except = 4;</code>
   * @return Whether the except field is set.
   */
  boolean hasExcept();
  /**
   * <pre>
   * except 심볼의 PathStarter로부터 만들어진 경로가 finish되는 시점에는 이번 path는 invalid하다
   * </pre>
   *
   * <code>int32 except = 4;</code>
   * @return The except.
   */
  int getExcept();

  /**
   * <pre>
   * join 심볼의 PathStarter로부터 만들어진 경로가 finish되는 시점에만 이번 path가 valid하다
   * </pre>
   *
   * <code>int32 join = 5;</code>
   * @return Whether the join field is set.
   */
  boolean hasJoin();
  /**
   * <pre>
   * join 심볼의 PathStarter로부터 만들어진 경로가 finish되는 시점에만 이번 path가 valid하다
   * </pre>
   *
   * <code>int32 join = 5;</code>
   * @return The join.
   */
  int getJoin();

  com.giyeok.jparser.mgroup3.proto.AcceptConditionTemplate.ConditionCase getConditionCase();
}
